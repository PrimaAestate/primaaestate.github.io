var Dr=Object.defineProperty;var Lr=(e,t,s)=>t in e?Dr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var O=(e,t,s)=>Lr(e,typeof t!="symbol"?t+"":t,s);import{d as Ir,j as $,k as jr,o as D,c as L,l as b,F as Ve,E as Me,e as ze,n as qr,t as x,$ as $r,p as xr,q as Br,a1 as Wr,a as _e,_ as Hr,I as Nr}from"./chunks/framework.w9X9clgI.js";function re(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function Ee(e,t,s,n){if(typeof s!="function")throw new Error("method for before hook must be a function");return n||(n={}),Array.isArray(t)?t.reverse().reduce((o,l)=>Ee.bind(null,e,l,o,n),s)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((o,l)=>l.hook.bind(null,o,n),s)():s(n))}function Vr(e,t,s,n){const o=n;e.registry[s]||(e.registry[s]=[]),t==="before"&&(n=(l,u)=>Promise.resolve().then(o.bind(null,u)).then(l.bind(null,u))),t==="after"&&(n=(l,u)=>{let g;return Promise.resolve().then(l.bind(null,u)).then(_=>(g=_,o(g,u))).then(()=>g)}),t==="error"&&(n=(l,u)=>Promise.resolve().then(l.bind(null,u)).catch(g=>o(g,u))),e.registry[s].push({hook:n,orig:o})}function Mr(e,t,s){if(!e.registry[t])return;const n=e.registry[t].map(o=>o.orig).indexOf(s);n!==-1&&e.registry[t].splice(n,1)}const Ke=Function.bind,Qe=Ke.bind(Ke);function sr(e,t,s){const n=Qe(Mr,null).apply(null,s?[t,s]:[t]);e.api={remove:n},e.remove=n,["before","error","after","wrap"].forEach(o=>{const l=s?[t,o,s]:[t,o];e[o]=e.api[o]=Qe(Vr,null).apply(null,l)})}function zr(){const e=Symbol("Singular"),t={registry:{}},s=Ee.bind(null,t,e);return sr(s,t,e),s}function Kr(){const e={registry:{}},t=Ee.bind(null,e);return sr(t,e),t}const Qr={Singular:zr,Collection:Kr};var Jr="0.0.0-development",Yr=`octokit-endpoint.js/${Jr} ${re()}`,Xr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Yr},mediaType:{format:""}};function Zr(e){return e?Object.keys(e).reduce((t,s)=>(t[s.toLowerCase()]=e[s],t),{}):{}}function et(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof s=="function"&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}function or(e,t){const s=Object.assign({},e);return Object.keys(t).forEach(n=>{et(t[n])?n in e?s[n]=or(e[n],t[n]):Object.assign(s,{[n]:t[n]}):Object.assign(s,{[n]:t[n]})}),s}function Je(e){for(const t in e)e[t]===void 0&&delete e[t];return e}function ge(e,t,s){var o;if(typeof t=="string"){let[l,u]=t.split(" ");s=Object.assign(u?{method:l,url:u}:{url:l},s)}else s=Object.assign({},t);s.headers=Zr(s.headers),Je(s),Je(s.headers);const n=or(e||{},s);return s.url==="/graphql"&&(e&&((o=e.mediaType.previews)!=null&&o.length)&&(n.mediaType.previews=e.mediaType.previews.filter(l=>!n.mediaType.previews.includes(l)).concat(n.mediaType.previews)),n.mediaType.previews=(n.mediaType.previews||[]).map(l=>l.replace(/-preview/,""))),n}function rt(e,t){const s=/\?/.test(e)?"&":"?",n=Object.keys(t);return n.length===0?e:e+s+n.map(o=>o==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${o}=${encodeURIComponent(t[o])}`).join("&")}var tt=/\{[^}]+\}/g;function st(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function ot(e){const t=e.match(tt);return t?t.map(st).reduce((s,n)=>s.concat(n),[]):[]}function Ye(e,t){const s={__proto__:null};for(const n of Object.keys(e))t.indexOf(n)===-1&&(s[n]=e[n]);return s}function nr(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function V(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function K(e,t,s){return t=e==="+"||e==="#"?nr(t):V(t),s?V(s)+"="+t:t}function N(e){return e!=null}function ce(e){return e===";"||e==="&"||e==="?"}function nt(e,t,s,n){var o=e[s],l=[];if(N(o)&&o!=="")if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")o=o.toString(),n&&n!=="*"&&(o=o.substring(0,parseInt(n,10))),l.push(K(t,o,ce(t)?s:""));else if(n==="*")Array.isArray(o)?o.filter(N).forEach(function(u){l.push(K(t,u,ce(t)?s:""))}):Object.keys(o).forEach(function(u){N(o[u])&&l.push(K(t,o[u],u))});else{const u=[];Array.isArray(o)?o.filter(N).forEach(function(g){u.push(K(t,g))}):Object.keys(o).forEach(function(g){N(o[g])&&(u.push(V(g)),u.push(K(t,o[g].toString())))}),ce(t)?l.push(V(s)+"="+u.join(",")):u.length!==0&&l.push(u.join(","))}else t===";"?N(o)&&l.push(V(s)):o===""&&(t==="&"||t==="?")?l.push(V(s)+"="):o===""&&l.push("");return l}function it(e){return{expand:at.bind(null,e)}}function at(e,t){var s=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(n,o,l){if(o){let g="";const _=[];if(s.indexOf(o.charAt(0))!==-1&&(g=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(w){var f=/([^:\*]*)(?::(\d+)|(\*))?/.exec(w);_.push(nt(t,g,f[1],f[2]||f[3]))}),g&&g!=="+"){var u=",";return g==="?"?u="&":g!=="#"&&(u=g),(_.length!==0?g:"")+_.join(u)}else return _.join(",")}else return nr(l)}),e==="/"?e:e.replace(/\/$/,"")}function ir(e){var f;let t=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),n=Object.assign({},e.headers),o,l=Ye(e,["method","baseUrl","url","headers","request","mediaType"]);const u=ot(s);s=it(s).expand(l),/^http/.test(s)||(s=e.baseUrl+s);const g=Object.keys(e).filter(v=>u.includes(v)).concat("baseUrl"),_=Ye(l,g);if(!/application\/octet-stream/i.test(n.accept)&&(e.mediaType.format&&(n.accept=n.accept.split(/,/).map(v=>v.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),s.endsWith("/graphql")&&(f=e.mediaType.previews)!=null&&f.length)){const v=n.accept.match(/[\w-]+(?=-preview)/g)||[];n.accept=v.concat(e.mediaType.previews).map(F=>{const S=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${F}-preview${S}`}).join(",")}return["GET","HEAD"].includes(t)?s=rt(s,_):"data"in _?o=_.data:Object.keys(_).length&&(o=_),!n["content-type"]&&typeof o<"u"&&(n["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof o>"u"&&(o=""),Object.assign({method:t,url:s,headers:n},typeof o<"u"?{body:o}:null,e.request?{request:e.request}:null)}function ct(e,t,s){return ir(ge(e,t,s))}function ar(e,t){const s=ge(e,t),n=ct.bind(null,s);return Object.assign(n,{DEFAULTS:s,defaults:ar.bind(null,s),merge:ge.bind(null,s),parse:ir})}var lt=ar(null,Xr);class Q extends Error{constructor(s,n,o){super(s);O(this,"name");O(this,"status");O(this,"request");O(this,"response");this.name="HttpError",this.status=Number.parseInt(n),Number.isNaN(this.status)&&(this.status=0),"response"in o&&(this.response=o.response);const l=Object.assign({},o.request);o.request.headers.authorization&&(l.headers=Object.assign({},o.request.headers,{authorization:o.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),l.url=l.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=l}}var ut="0.0.0-development",pt={headers:{"user-agent":`octokit-request.js/${ut} ${re()}`}};function dt(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof s=="function"&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}async function Xe(e){var v,F,S,C,y;const t=((v=e.request)==null?void 0:v.fetch)||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const s=((F=e.request)==null?void 0:F.log)||console,n=((S=e.request)==null?void 0:S.parseSuccessResponseBody)!==!1,o=dt(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,l=Object.fromEntries(Object.entries(e.headers).map(([E,T])=>[E,String(T)]));let u;try{u=await t(e.url,{method:e.method,body:o,redirect:(C=e.request)==null?void 0:C.redirect,headers:l,signal:(y=e.request)==null?void 0:y.signal,...e.body&&{duplex:"half"}})}catch(E){let T="Unknown Error";if(E instanceof Error){if(E.name==="AbortError")throw E.status=500,E;T=E.message,E.name==="TypeError"&&"cause"in E&&(E.cause instanceof Error?T=E.cause.message:typeof E.cause=="string"&&(T=E.cause))}const P=new Q(T,500,{request:e});throw P.cause=E,P}const g=u.status,_=u.url,w={};for(const[E,T]of u.headers)w[E]=T;const f={url:_,status:g,headers:w,data:""};if("deprecation"in w){const E=w.link&&w.link.match(/<([^>]+)>; rel="deprecation"/),T=E&&E.pop();s.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${w.sunset}${T?`. See ${T}`:""}`)}if(g===204||g===205)return f;if(e.method==="HEAD"){if(g<400)return f;throw new Q(u.statusText,g,{response:f,request:e})}if(g===304)throw f.data=await le(u),new Q("Not modified",g,{response:f,request:e});if(g>=400)throw f.data=await le(u),new Q(gt(f.data),g,{response:f,request:e});return f.data=n?await le(u):u.body,f}async function le(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch(()=>e.text()).catch(()=>""):!t||/^text\/|charset=utf-8$/.test(t)?e.text():e.arrayBuffer()}function gt(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(s=>JSON.stringify(s)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}function me(e,t){const s=e.defaults(t);return Object.assign(function(o,l){const u=s.merge(o,l);if(!u.request||!u.request.hook)return Xe(s.parse(u));const g=(_,w)=>Xe(s.parse(s.merge(_,w)));return Object.assign(g,{endpoint:s,defaults:me.bind(null,s)}),u.request.hook(g,u)},{endpoint:s,defaults:me.bind(null,s)})}var he=me(lt,pt),mt="0.0.0-development";function ht(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var _t=class extends Error{constructor(t,s,n){super(ht(n));O(this,"name","GraphqlResponseError");O(this,"errors");O(this,"data");this.request=t,this.headers=s,this.response=n,this.errors=n.errors,this.data=n.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Et=["method","baseUrl","url","headers","request","query","mediaType"],Tt=["query","method","url"],Ze=/\/api\/v3\/?$/;function ft(e,t,s){if(s){if(typeof t=="string"&&"query"in s)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const u in s)if(Tt.includes(u))return Promise.reject(new Error(`[@octokit/graphql] "${u}" cannot be used as variable name`))}const n=typeof t=="string"?Object.assign({query:t},s):t,o=Object.keys(n).reduce((u,g)=>Et.includes(g)?(u[g]=n[g],u):(u.variables||(u.variables={}),u.variables[g]=n[g],u),{}),l=n.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Ze.test(l)&&(o.url=l.replace(Ze,"/api/graphql")),e(o).then(u=>{if(u.data.errors){const g={};for(const _ of Object.keys(u.headers))g[_]=u.headers[_];throw new _t(o,g,u.data)}return u.data.data})}function Te(e,t){const s=e.defaults(t);return Object.assign((o,l)=>ft(s,o,l),{defaults:Te.bind(null,s),endpoint:s.endpoint})}Te(he,{headers:{"user-agent":`octokit-graphql.js/${mt} ${re()}`},method:"POST",url:"/graphql"});function bt(e){return Te(e,{method:"POST",url:"/graphql"})}var wt=/^v1\./,vt=/^ghs_/,yt=/^ghu_/;async function kt(e){const t=e.split(/\./).length===3,s=wt.test(e)||vt.test(e),n=yt.test(e);return{type:"token",token:e,tokenType:t?"app":s?"installation":n?"user-to-server":"oauth"}}function Pt(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function Gt(e,t,s,n){const o=t.endpoint.merge(s,n);return o.headers.authorization=Pt(e),t(o)}var Ot=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(kt.bind(null,t),{hook:Gt.bind(null,t)})};const cr="6.1.2",er=()=>{},Rt=console.warn.bind(console),At=console.error.bind(console),rr=`octokit-core.js/${cr} ${re()}`;var X;let St=(X=class{constructor(t={}){O(this,"request");O(this,"graphql");O(this,"log");O(this,"hook");O(this,"auth");const s=new Qr.Collection,n={baseUrl:he.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:s.bind(null,"request")}),mediaType:{previews:[],format:""}};if(n.headers["user-agent"]=t.userAgent?`${t.userAgent} ${rr}`:rr,t.baseUrl&&(n.baseUrl=t.baseUrl),t.previews&&(n.mediaType.previews=t.previews),t.timeZone&&(n.headers["time-zone"]=t.timeZone),this.request=he.defaults(n),this.graphql=bt(this.request).defaults(n),this.log=Object.assign({debug:er,info:er,warn:Rt,error:At},t.log),this.hook=s,t.authStrategy){const{authStrategy:l,...u}=t,g=l(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:u},t.auth));s.wrap("request",g.hook),this.auth=g}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{const l=Ot(t.auth);s.wrap("request",l.hook),this.auth=l}const o=this.constructor;for(let l=0;l<o.plugins.length;++l)Object.assign(this,o.plugins[l](this,t))}static defaults(t){return class extends this{constructor(...n){const o=n[0]||{};if(typeof t=="function"){super(t(o));return}super(Object.assign({},t,o,o.userAgent&&t.userAgent?{userAgent:`${o.userAgent} ${t.userAgent}`}:null))}}}static plugin(...t){var o;const s=this.plugins;return o=class extends this{},O(o,"plugins",s.concat(t.filter(l=>!s.includes(l)))),o}},O(X,"VERSION",cr),O(X,"plugins",[]),X);var Ft="0.0.0-development";function Ct(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const s=e.data.incomplete_results,n=e.data.repository_selection,o=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const l=Object.keys(e.data)[0],u=e.data[l];return e.data=u,typeof s<"u"&&(e.data.incomplete_results=s),typeof n<"u"&&(e.data.repository_selection=n),e.data.total_count=o,e}function fe(e,t,s){const n=typeof t=="function"?t.endpoint(s):e.request.endpoint(t,s),o=typeof t=="function"?t:e.request,l=n.method,u=n.headers;let g=n.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!g)return{done:!0};try{const _=await o({method:l,url:g,headers:u}),w=Ct(_);return g=((w.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:w}}catch(_){if(_.status!==409)throw _;return g="",{value:{status:200,headers:{},data:[]}}}}})}}function lr(e,t,s,n){return typeof s=="function"&&(n=s,s=void 0),ur(e,[],fe(e,t,s)[Symbol.asyncIterator](),n)}function ur(e,t,s,n){return s.next().then(o=>{if(o.done)return t;let l=!1;function u(){l=!0}return t=t.concat(n?n(o.value,u):o.value.data),l?t:ur(e,t,s,n)})}Object.assign(lr,{iterator:fe});function pr(e){return{paginate:Object.assign(lr.bind(null,e),{iterator:fe.bind(null,e)})}}pr.VERSION=Ft;var Ut=(e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`,Dt=class extends Error{constructor(t,s){super(Ut(t.pathInQuery,s));O(this,"name","MissingCursorChangeError");this.pageInfo=t,this.cursorValue=s,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Lt=class extends Error{constructor(t){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(t,null,2)}`);O(this,"name","MissingPageInfo");this.response=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},It=e=>Object.prototype.toString.call(e)==="[object Object]";function dr(e){const t=gr(e,"pageInfo");if(t.length===0)throw new Lt(e);return t}var gr=(e,t,s=[])=>{for(const n of Object.keys(e)){const o=[...s,n],l=e[n];if(It(l)){if(l.hasOwnProperty(t))return o;const u=gr(l,t,o);if(u.length>0)return u}}return[]},J=(e,t)=>t.reduce((s,n)=>s[n],e),ue=(e,t,s)=>{const n=t[t.length-1],o=[...t].slice(0,-1),l=J(e,o);typeof s=="function"?l[n]=s(l[n]):l[n]=s},jt=e=>{const t=dr(e);return{pathInQuery:t,pageInfo:J(e,[...t,"pageInfo"])}},mr=e=>e.hasOwnProperty("hasNextPage"),qt=e=>mr(e)?e.endCursor:e.startCursor,$t=e=>mr(e)?e.hasNextPage:e.hasPreviousPage,hr=e=>(t,s={})=>{let n=!0,o={...s};return{[Symbol.asyncIterator]:()=>({async next(){if(!n)return{done:!0,value:{}};const l=await e.graphql(t,o),u=jt(l),g=qt(u.pageInfo);if(n=$t(u.pageInfo),n&&g===o.cursor)throw new Dt(u,g);return o={...o,cursor:g},{done:!1,value:l}}})}},xt=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);const s=dr(e),n=[...s,"nodes"],o=J(t,n);o&&ue(e,n,_=>[..._,...o]);const l=[...s,"edges"],u=J(t,l);u&&ue(e,l,_=>[..._,...u]);const g=[...s,"pageInfo"];return ue(e,g,J(t,g)),e},Bt=e=>{const t=hr(e);return async(s,n={})=>{let o={};for await(const l of t(s,n))o=xt(o,l);return o}};function Wt(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(Bt(e),{iterator:hr(e)})})}}const Ht="13.2.6",Nt={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var Vt=Nt;const H=new Map;for(const[e,t]of Object.entries(Vt))for(const[s,n]of Object.entries(t)){const[o,l,u]=n,[g,_]=o.split(/ /),w=Object.assign({method:g,url:_},l);H.has(e)||H.set(e,new Map),H.get(e).set(s,{scope:e,methodName:s,endpointDefaults:w,decorations:u})}const Mt={has({scope:e},t){return H.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,s){return Object.defineProperty(e.cache,t,s),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...H.get(e).keys()]},set(e,t,s){return e.cache[t]=s},get({octokit:e,scope:t,cache:s},n){if(s[n])return s[n];const o=H.get(t).get(n);if(!o)return;const{endpointDefaults:l,decorations:u}=o;return u?s[n]=Kt(e,t,n,l,u):s[n]=e.request.defaults(l),s[n]}};function zt(e){const t={};for(const s of H.keys())t[s]=new Proxy({octokit:e,scope:s,cache:{}},Mt);return t}function Kt(e,t,s,n,o){const l=e.request.defaults(n);function u(...g){let _=l.endpoint.merge(...g);if(o.mapToData)return _=Object.assign({},_,{data:_[o.mapToData],[o.mapToData]:void 0}),l(_);if(o.renamed){const[w,f]=o.renamed;e.log.warn(`octokit.${t}.${s}() has been renamed to octokit.${w}.${f}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const w=l.endpoint.merge(...g);for(const[f,v]of Object.entries(o.renamedParameters))f in w&&(e.log.warn(`"${f}" parameter is deprecated for "octokit.${t}.${s}()". Use "${v}" instead`),v in w||(w[v]=w[f]),delete w[f]);return l(w)}return l(...g)}return Object.assign(u,l)}function _r(e){return{rest:zt(e)}}_r.VERSION=Ht;var pe=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Qt(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Er={exports:{}};(function(e,t){(function(s,n){e.exports=n()})(pe,function(){var s=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof pe<"u"?pe:typeof self<"u"?self:{};function n(h){return h&&h.default||h}var o=function(h,i,r={}){var a,c,p;for(a in i)p=i[a],r[a]=(c=h[a])!=null?c:p;return r},l=function(h,i,r={}){var a,c;for(a in h)c=h[a],i[a]!==void 0&&(r[a]=c);return r},u={load:o,overwrite:l},g;g=class{constructor(i,r){this.incr=i,this.decr=r,this._first=null,this._last=null,this.length=0}push(i){var r;this.length++,typeof this.incr=="function"&&this.incr(),r={value:i,prev:this._last,next:null},this._last!=null?(this._last.next=r,this._last=r):this._first=this._last=r}shift(){var i;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),i=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,i}first(){if(this._first!=null)return this._first.value}getArray(){var i,r,a;for(i=this._first,a=[];i!=null;)a.push((r=i,i=i.next,r.value));return a}forEachShift(i){var r;for(r=this.shift();r!=null;)i(r),r=this.shift()}debug(){var i,r,a,c,p;for(i=this._first,p=[];i!=null;)p.push((r=i,i=i.next,{value:r.value,prev:(a=r.prev)!=null?a.value:void 0,next:(c=r.next)!=null?c.value:void 0}));return p}};var _=g,w;w=class{constructor(i){if(this.instance=i,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(r,a)=>this._addListener(r,"many",a),this.instance.once=(r,a)=>this._addListener(r,"once",a),this.instance.removeAllListeners=(r=null)=>r!=null?delete this._events[r]:this._events={}}_addListener(i,r,a){var c;return(c=this._events)[i]==null&&(c[i]=[]),this._events[i].push({cb:a,status:r}),this.instance}listenerCount(i){return this._events[i]!=null?this._events[i].length:0}async trigger(i,...r){var a,c;try{return i!=="debug"&&this.trigger("debug",`Event triggered: ${i}`,r),this._events[i]==null?void 0:(this._events[i]=this._events[i].filter(function(p){return p.status!=="none"}),c=this._events[i].map(async p=>{var d,m;if(p.status!=="none"){p.status==="once"&&(p.status="none");try{return m=typeof p.cb=="function"?p.cb(...r):void 0,typeof(m!=null?m.then:void 0)=="function"?await m:m}catch(k){return d=k,this.trigger("error",d),null}}}),(await Promise.all(c)).find(function(p){return p!=null}))}catch(p){return a=p,this.trigger("error",a),null}}};var f=w,v,F,S;v=_,F=f,S=class{constructor(i){this.Events=new F(this),this._length=0,this._lists=(function(){var r,a,c;for(c=[],r=1,a=i;1<=a?r<=a:r>=a;1<=a?++r:--r)c.push(new v(()=>this.incr(),()=>this.decr()));return c}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(i){return this._lists[i.options.priority].push(i)}queued(i){return i!=null?this._lists[i].length:this._length}shiftAll(i){return this._lists.forEach(function(r){return r.forEachShift(i)})}getFirst(i=this._lists){var r,a,c;for(r=0,a=i.length;r<a;r++)if(c=i[r],c.length>0)return c;return[]}shiftLastFrom(i){return this.getFirst(this._lists.slice(i).reverse()).shift()}};var C=S,y;y=class extends Error{};var E=y,T,P,j,B,W;B=10,P=5,W=u,T=E,j=class{constructor(i,r,a,c,p,d,m,k){this.task=i,this.args=r,this.rejectOnDrop=p,this.Events=d,this._states=m,this.Promise=k,this.options=W.load(a,c),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===c.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((R,A)=>{this._resolve=R,this._reject=A}),this.retryCount=0}_sanitizePriority(i){var r;return r=~~i!==i?P:i,r<0?0:r>B-1?B-1:r}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:i,message:r="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(i??new T(r)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(i){var r;if(r=this._states.jobStatus(this.options.id),!(r===i||i==="DONE"&&r===null))throw new T(`Invalid job status ${r}, expected ${i}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(i,r){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:i,blocked:r})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(i,r,a,c){var p,d,m;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",d);try{if(m=await(i!=null?i.schedule(this.options,this.task,...this.args):this.task(...this.args)),r())return this.doDone(d),await c(this.options,d),this._assertStatus("DONE"),this._resolve(m)}catch(k){return p=k,this._onFailure(p,d,r,a,c)}}doExpire(i,r,a){var c,p;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),p={args:this.args,options:this.options,retryCount:this.retryCount},c=new T(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(c,p,i,r,a)}async _onFailure(i,r,a,c,p){var d,m;if(a())return d=await this.Events.trigger("failed",i,r),d!=null?(m=~~d,this.Events.trigger("retry",`Retrying ${this.options.id} after ${m} ms`,r),this.retryCount++,c(m)):(this.doDone(r),await p(this.options,r),this._assertStatus("DONE"),this._reject(i))}doDone(i){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",i)}};var G=j,q,te,se;se=u,q=E,te=class{constructor(i,r,a){this.instance=i,this.storeOptions=r,this.clientId=this.instance._randomIndex(),se.load(a,a,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var i;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(i=this.heartbeat=setInterval(()=>{var r,a,c,p,d;if(p=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&p>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=p,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&p>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:r,reservoirIncreaseMaximum:c,reservoir:d}=this.storeOptions,this._lastReservoirIncrease=p,a=c!=null?Math.min(r,c-d):r,a>0))return this.storeOptions.reservoir+=a,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?i.unref():void 0:clearInterval(this.heartbeat)}async __publish__(i){return await this.yieldLoop(),this.instance.Events.trigger("message",i.toString())}async __disconnect__(i){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(i=0){return new this.Promise(function(r,a){return setTimeout(r,i)})}computePenalty(){var i;return(i=this.storeOptions.penalty)!=null?i:15*this.storeOptions.minTime||5e3}async __updateSettings__(i){return await this.yieldLoop(),se.overwrite(i,i,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(i){return await this.yieldLoop(),this._nextRequest+this.timeout<i}computeCapacity(){var i,r;return{maxConcurrent:i,reservoir:r}=this.storeOptions,i!=null&&r!=null?Math.min(i-this._running,r):i!=null?i-this._running:r??null}conditionsCheck(i){var r;return r=this.computeCapacity(),r==null||i<=r}async __incrementReservoir__(i){var r;return await this.yieldLoop(),r=this.storeOptions.reservoir+=i,this.instance._drainAll(this.computeCapacity()),r}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(i){return this._unblockTime>=i}check(i,r){return this.conditionsCheck(i)&&this._nextRequest-r<=0}async __check__(i){var r;return await this.yieldLoop(),r=Date.now(),this.check(i,r)}async __register__(i,r,a){var c,p;return await this.yieldLoop(),c=Date.now(),this.conditionsCheck(r)?(this._running+=r,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=r),p=Math.max(this._nextRequest-c,0),this._nextRequest=c+p+this.storeOptions.minTime,{success:!0,wait:p,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(i,r){var a,c,p;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&r>this.storeOptions.maxConcurrent)throw new q(`Impossible to add a job having a weight of ${r} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return c=Date.now(),p=this.storeOptions.highWater!=null&&i===this.storeOptions.highWater&&!this.check(r,c),a=this.strategyIsBlock()&&(p||this.isBlocked(c)),a&&(this._unblockTime=c+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:p,blocked:a,strategy:this.storeOptions.strategy}}async __free__(i,r){return await this.yieldLoop(),this._running-=r,this._done+=r,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var vr=te,we,ve;we=E,ve=class{constructor(i){this.status=i,this._jobs={},this.counts=this.status.map(function(){return 0})}next(i){var r,a;if(r=this._jobs[i],a=r+1,r!=null&&a<this.status.length)return this.counts[r]--,this.counts[a]++,this._jobs[i]++;if(r!=null)return this.counts[r]--,delete this._jobs[i]}start(i){var r;return r=0,this._jobs[i]=r,this.counts[r]++}remove(i){var r;return r=this._jobs[i],r!=null&&(this.counts[r]--,delete this._jobs[i]),r!=null}jobStatus(i){var r;return(r=this.status[this._jobs[i]])!=null?r:null}statusJobs(i){var r,a,c,p,d;if(i!=null){if(a=this.status.indexOf(i),a<0)throw new we(`status must be one of ${this.status.join(", ")}`);c=this._jobs,p=[];for(r in c)d=c[r],d===a&&p.push(r);return p}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((i,r,a)=>(i[this.status[a]]=r,i),{})}};var yr=ve,ye,ke;ye=_,ke=class{constructor(i,r){this.schedule=this.schedule.bind(this),this.name=i,this.Promise=r,this._running=0,this._queue=new ye}isEmpty(){return this._queue.length===0}async _tryToRun(){var i,r,a,c,p,d,m;if(this._running<1&&this._queue.length>0)return this._running++,{task:m,args:i,resolve:p,reject:c}=this._queue.shift(),r=await async function(){try{return d=await m(...i),function(){return p(d)}}catch(k){return a=k,function(){return c(a)}}}(),this._running--,this._tryToRun(),r()}schedule(i,...r){var a,c,p;return p=c=null,a=new this.Promise(function(d,m){return p=d,c=m}),this._queue.push({task:i,args:r,resolve:p,reject:c}),this._tryToRun(),a}};var kr=ke,Pe="2.19.5",Pr={version:Pe},Gr=Object.freeze({version:Pe,default:Pr}),Ge=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Oe=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Or=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Re,Ae,Se,Fe,Ce,Y;Y=u,Re=f,Fe=Ge,Se=Oe,Ce=Or,Ae=(function(){class h{constructor(r={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=r,Y.load(this.limiterOptions,this.defaults,this),this.Events=new Re(this),this.instances={},this.Bottleneck=He,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new Fe(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new Se(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(r=""){var a;return(a=this.instances[r])!=null?a:(()=>{var c;return c=this.instances[r]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${r}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",c,r),c})()}async deleteKey(r=""){var a,c;return c=this.instances[r],this.connection&&(a=await this.connection.__runCommand__(["del",...Ce.allKeys(`${this.id}-${r}`)])),c!=null&&(delete this.instances[r],await c.disconnect()),c!=null||a>0}limiters(){var r,a,c,p;a=this.instances,c=[];for(r in a)p=a[r],c.push({key:r,limiter:p});return c}keys(){return Object.keys(this.instances)}async clusterKeys(){var r,a,c,p,d,m,k,R,A;if(this.connection==null)return this.Promise.resolve(this.keys());for(m=[],r=null,A=`b_${this.id}-`.length,a=9;r!==0;)for([R,c]=await this.connection.__runCommand__(["scan",r??0,"match",`b_${this.id}-*_settings`,"count",1e4]),r=~~R,p=0,k=c.length;p<k;p++)d=c[p],m.push(d.slice(A,-a));return m}_startAutoCleanup(){var r;return clearInterval(this.interval),typeof(r=this.interval=setInterval(async()=>{var a,c,p,d,m,k;m=Date.now(),p=this.instances,d=[];for(c in p){k=p[c];try{await k._store.__groupCheck__(m)?d.push(this.deleteKey(c)):d.push(void 0)}catch(R){a=R,d.push(k.Events.trigger("error",a))}}return d},this.timeout/2)).unref=="function"?r.unref():void 0}updateSettings(r={}){if(Y.overwrite(r,this.defaults,this),Y.overwrite(r,r,this.limiterOptions),r.timeout!=null)return this._startAutoCleanup()}disconnect(r=!0){var a;if(!this.sharedConnection)return(a=this.connection)!=null?a.disconnect(r):void 0}}return h.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},h}).call(s);var Rr=Ae,Ue,De,Le;Le=u,De=f,Ue=(function(){class h{constructor(r={}){this.options=r,Le.load(this.options,this.defaults,this),this.Events=new De(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((r,a)=>this._resolve=r)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(r){var a;return this._arr.push(r),a=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),a}}return h.prototype.defaults={maxTime:null,maxSize:null,Promise},h}).call(s);var Ar=Ue,Sr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Fr=n(Gr),Ie,je,oe,ne,qe,ie,$e,xe,Be,ae,U,We=[].splice;ie=10,je=5,U=u,$e=C,ne=G,qe=vr,xe=Sr,oe=f,Be=yr,ae=kr,Ie=(function(){class h{constructor(r={},...a){var c,p;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(r,a),U.load(r,this.instanceDefaults,this),this._queues=new $e(ie),this._scheduled={},this._states=new Be(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new oe(this),this._submitLock=new ae("submit",this.Promise),this._registerLock=new ae("register",this.Promise),p=U.load(r,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return c=U.load(r,this.redisStoreDefaults,{}),new xe(this,p,c);if(this.datastore==="local")return c=U.load(r,this.localStoreDefaults,{}),new qe(this,p,c);throw new h.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.ref=="function"?d.ref():void 0}),this._queues.on("zero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.unref=="function"?d.unref():void 0})}_validateOptions(r,a){if(!(r!=null&&typeof r=="object"&&a.length===0))throw new h.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(r){return this._store.__publish__(r)}disconnect(r=!0){return this._store.__disconnect__(r)}chain(r){return this._limiter=r,this}queued(r){return this._queues.queued(r)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(r){return this._states.jobStatus(r)}jobs(r){return this._states.statusJobs(r)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(r=1){return this._store.__check__(r)}_clearGlobalState(r){return this._scheduled[r]!=null?(clearTimeout(this._scheduled[r].expiration),delete this._scheduled[r],!0):!1}async _free(r,a,c,p){var d,m;try{if({running:m}=await this._store.__free__(r,c.weight),this.Events.trigger("debug",`Freed ${c.id}`,p),m===0&&this.empty())return this.Events.trigger("idle")}catch(k){return d=k,this.Events.trigger("error",d)}}_run(r,a,c){var p,d,m;return a.doRun(),p=this._clearGlobalState.bind(this,r),m=this._run.bind(this,r,a),d=this._free.bind(this,r,a),this._scheduled[r]={timeout:setTimeout(()=>a.doExecute(this._limiter,p,m,d),c),expiration:a.options.expiration!=null?setTimeout(function(){return a.doExpire(p,m,d)},c+a.options.expiration):void 0,job:a}}_drainOne(r){return this._registerLock.schedule(()=>{var a,c,p,d,m;return this.queued()===0?this.Promise.resolve(null):(m=this._queues.getFirst(),{options:d,args:a}=p=m.first(),r!=null&&d.weight>r?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${d.id}`,{args:a,options:d}),c=this._randomIndex(),this._store.__register__(c,d.weight,d.expiration).then(({success:k,wait:R,reservoir:A})=>{var z;return this.Events.trigger("debug",`Drained ${d.id}`,{success:k,args:a,options:d}),k?(m.shift(),z=this.empty(),z&&this.Events.trigger("empty"),A===0&&this.Events.trigger("depleted",z),this._run(c,p,R),this.Promise.resolve(d.weight)):this.Promise.resolve(null)})))})}_drainAll(r,a=0){return this._drainOne(r).then(c=>{var p;return c!=null?(p=r!=null?r-c:r,this._drainAll(p,a+c)):this.Promise.resolve(a)}).catch(c=>this.Events.trigger("error",c))}_dropAllQueued(r){return this._queues.shiftAll(function(a){return a.doDrop({message:r})})}stop(r={}){var a,c;return r=U.load(r,this.stopDefaults),c=p=>{var d;return d=()=>{var m;return m=this._states.counts,m[0]+m[1]+m[2]+m[3]===p},new this.Promise((m,k)=>d()?m():this.on("done",()=>{if(d())return this.removeAllListeners("done"),m()}))},a=r.dropWaitingJobs?(this._run=function(p,d){return d.doDrop({message:r.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var p,d,m;d=this._scheduled;for(p in d)m=d[p],this.jobStatus(m.job.options.id)==="RUNNING"&&(clearTimeout(m.timeout),clearTimeout(m.expiration),m.job.doDrop({message:r.dropErrorMessage}));return this._dropAllQueued(r.dropErrorMessage),c(0)}))):this.schedule({priority:ie-1,weight:0},()=>c(1)),this._receive=function(p){return p._reject(new h.prototype.BottleneckError(r.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new h.prototype.BottleneckError("stop() has already been called")),a}async _addToQueue(r){var a,c,p,d,m,k,R;({args:a,options:d}=r);try{({reachedHWM:m,blocked:c,strategy:R}=await this._store.__submit__(this.queued(),d.weight))}catch(A){return p=A,this.Events.trigger("debug",`Could not queue ${d.id}`,{args:a,options:d,error:p}),r.doDrop({error:p}),!1}return c?(r.doDrop(),!0):m&&(k=R===h.prototype.strategy.LEAK?this._queues.shiftLastFrom(d.priority):R===h.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(d.priority+1):R===h.prototype.strategy.OVERFLOW?r:void 0,k!=null&&k.doDrop(),k==null||R===h.prototype.strategy.OVERFLOW)?(k==null&&r.doDrop(),m):(r.doQueue(m,c),this._queues.push(r),await this._drainAll(),m)}_receive(r){return this._states.jobStatus(r.options.id)!=null?(r._reject(new h.prototype.BottleneckError(`A job with the same id already exists (id=${r.options.id})`)),!1):(r.doReceive(),this._submitLock.schedule(this._addToQueue,r))}submit(...r){var a,c,p,d,m,k,R;return typeof r[0]=="function"?(m=r,[c,...r]=m,[a]=We.call(r,-1),d=U.load({},this.jobDefaults)):(k=r,[d,c,...r]=k,[a]=We.call(r,-1),d=U.load(d,this.jobDefaults)),R=(...A)=>new this.Promise(function(z,Ur){return c(...A,function(...Ne){return(Ne[0]!=null?Ur:z)(Ne)})}),p=new ne(R,r,d,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),p.promise.then(function(A){return typeof a=="function"?a(...A):void 0}).catch(function(A){return Array.isArray(A)?typeof a=="function"?a(...A):void 0:typeof a=="function"?a(A):void 0}),this._receive(p)}schedule(...r){var a,c,p;return typeof r[0]=="function"?([p,...r]=r,c={}):[c,p,...r]=r,a=new ne(p,r,c,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(a),a.promise}wrap(r){var a,c;return a=this.schedule.bind(this),c=function(...p){return a(r.bind(this),...p)},c.withOptions=function(p,...d){return a(p,r,...d)},c}async updateSettings(r={}){return await this._store.__updateSettings__(U.overwrite(r,this.storeDefaults)),U.overwrite(r,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(r=0){return this._store.__incrementReservoir__(r)}}return h.default=h,h.Events=oe,h.version=h.prototype.version=Fr.version,h.strategy=h.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},h.BottleneckError=h.prototype.BottleneckError=E,h.Group=h.prototype.Group=Rr,h.RedisConnection=h.prototype.RedisConnection=Ge,h.IORedisConnection=h.prototype.IORedisConnection=Oe,h.Batcher=h.prototype.Batcher=Ar,h.prototype.jobDefaults={priority:je,weight:1,expiration:null,id:"<no-id>"},h.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:h.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},h.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},h.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},h.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},h.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},h}).call(s);var He=Ie,Cr=He;return Cr})})(Er);var Jt=Er.exports;const Tr=Qt(Jt);var Yt="0.0.0-development";async function fr(e,t,s,n){if(!s.request||!s.request.request)throw s;if(s.status>=400&&!e.doNotRetry.includes(s.status)){const o=n.request.retries!=null?n.request.retries:e.retries,l=Math.pow((n.request.retryCount||0)+1,2);throw t.retry.retryRequest(s,o,l)}throw s}async function Xt(e,t,s,n){const o=new Tr;return o.on("failed",function(l,u){const g=~~l.request.request.retries,_=~~l.request.request.retryAfter;if(n.request.retryCount=u.retryCount+1,g>u.retryCount)return _*e.retryAfterBaseValue}),o.schedule(Zt.bind(null,e,t,s),n)}async function Zt(e,t,s,n){const o=await s(s,n);if(o.data&&o.data.errors&&o.data.errors.length>0&&/Something went wrong while executing your query/.test(o.data.errors[0].message)){const l=new Q(o.data.errors[0].message,500,{request:n,response:o});return fr(e,t,l,n)}return o}function br(e,t){const s=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},t.retry);return s.enabled&&(e.hook.error("request",fr.bind(null,s,e)),e.hook.wrap("request",Xt.bind(null,s,e))),{retry:{retryRequest:(n,o,l)=>(n.request.request=Object.assign({},n.request.request,{retries:o,retryAfter:l}),n)}}}br.VERSION=Yt;var es="0.0.0-development",de=()=>Promise.resolve();function rs(e,t,s){return e.retryLimiter.schedule(ts,e,t,s)}async function ts(e,t,s){const n=s.method!=="GET"&&s.method!=="HEAD",{pathname:o}=new URL(s.url,"http://github.test"),l=s.method==="GET"&&o.startsWith("/search/"),u=o.startsWith("/graphql"),_=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(_.expiration=1e3*60),(n||u)&&await e.write.key(e.id).schedule(_,de),n&&e.triggersNotification(o)&&await e.notifications.key(e.id).schedule(_,de),l&&await e.search.key(e.id).schedule(_,de);const w=e.global.key(e.id).schedule(_,t,s);if(u){const f=await w;if(f.data.errors!=null&&f.data.errors.some(v=>v.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:f,data:f.data})}return w}var ss=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function os(e){const s=`^(?:${e.map(n=>n.split("/").map(o=>o.startsWith("{")?"(?:.+?)":o).join("/")).map(n=>`(?:${n})`).join("|")})[^/]*$`;return new RegExp(s,"i")}var tr=os(ss),wr=tr.test.bind(tr),M={},ns=function(e,t){M.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),M.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),M.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),M.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function be(e,t){const{enabled:s=!0,Bottleneck:n=Tr,id:o="no-id",timeout:l=1e3*60*2,connection:u}=t.throttle||{};if(!s)return{};const g={timeout:l};typeof u<"u"&&(g.connection=u),M.global==null&&ns(n,g);const _=Object.assign({clustering:u!=null,triggersNotification:wr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new n,id:o,...M},t.throttle);if(typeof _.onSecondaryRateLimit!="function"||typeof _.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const w={},f=new n.Events(w);return w.on("secondary-limit",_.onSecondaryRateLimit),w.on("rate-limit",_.onRateLimit),w.on("error",v=>e.log.warn("Error in throttling-plugin limit handler",v)),_.retryLimiter.on("failed",async function(v,F){const[S,C,y]=F.args,{pathname:E}=new URL(y.url,"http://github.test");if(!(E.startsWith("/graphql")&&v.status!==401||v.status===403||v.status===429))return;const P=~~C.retryCount;C.retryCount=P,y.request.retryCount=P;const{wantRetry:j,retryAfter:B=0}=await async function(){var W;if(/\bsecondary rate\b/i.test(v.message)){const G=Number(v.response.headers["retry-after"])||S.fallbackSecondaryRateRetryAfter;return{wantRetry:await f.trigger("secondary-limit",G,y,e,P),retryAfter:G}}if(v.response.headers!=null&&v.response.headers["x-ratelimit-remaining"]==="0"||(((W=v.response.data)==null?void 0:W.errors)??[]).some(G=>G.type==="RATE_LIMITED")){const G=new Date(~~v.response.headers["x-ratelimit-reset"]*1e3).getTime(),q=Math.max(Math.ceil((G-Date.now())/1e3)+1,0);return{wantRetry:await f.trigger("rate-limit",q,y,e,P),retryAfter:q}}return{}}();if(j)return C.retryCount++,B*S.retryAfterBaseValue}),e.hook.wrap("request",rs.bind(null,_)),{}}be.VERSION=es;be.triggersNotification=wr;var is="0.0.0-development",as=St.plugin(_r,pr,Wt,br,be).defaults({userAgent:`octokit.js/${is}`,throttle:{onRateLimit:cs,onSecondaryRateLimit:ls}});function cs(e,t,s){if(s.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),t.request.retryCount===0)return s.log.info(`Retrying after ${e} seconds!`),!0}function ls(e,t,s){if(s.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),t.request.retryCount===0)return s.log.info(`Retrying after ${e} seconds!`),!0}function Z(){var e=["2274618efpxdk","9DLWczOva0","24eGVDkG","470rQROWE","3333006kCYudt","QZ91vIRGMC","4CCbbwr","9352530qFvtdM","1491QUVFPF","Q6G","bRjcgg3waT","yXu4Yp59cN","1070193ikAXNa","441255vGdhQx","pEp_QBeIYI","7tqdZbv","D7YTAvUwii","6041650HrHWHV"];return Z=function(){return e},Z()}function ee(e,t){var s=Z();return ee=function(n,o){n=n-455;var l=s[n];return l},ee(e,t)}(function(e,t){for(var s=ee,n=e();;)try{var o=parseInt(s(470))/1*(parseInt(s(465))/2)+parseInt(s(456))/3*(parseInt(s(468))/4)+-parseInt(s(457))/5+parseInt(s(462))/6*(parseInt(s(459))/7)+-parseInt(s(464))/8*(-parseInt(s(466))/9)+-parseInt(s(461))/10+-parseInt(s(469))/11;if(o===t)break;n.push(n.shift())}catch{n.push(n.shift())}})(Z,654575);function us(){var e=ee;return"github_pat_11BOB56AY0koFCWkCag"+e(458)+e(463)+e(455)+e(472)+e(467)+e(460)+e(471)}const ps=us(),I=e=>(xr("data-v-8c496fa0"),e=e(),Br(),e),ds={class:"form"},gs=I(()=>b("h1",{style:{"text-align":"center"}},"Product Feedback",-1)),ms={key:0},hs=I(()=>b("h4",null,"Your Feedback History",-1)),_s=I(()=>b("thead",null,[b("tr",null,[b("td",null,"Title"),b("td",null,"State"),b("td",null,"Created Time"),b("td",null,"Updated Time")])],-1)),Es=["href"],Ts={key:1},fs=I(()=>b("p",{class:"tip custom-block",style:{padding:"8px 16px","text-align":"center"}}," Please describe the issue in detail, so that I can improve the product better. Thank you. ",-1)),bs={class:"form-item"},ws=I(()=>b("label",{for:"application"},"* Application",-1)),vs=["value"],ys=Wr('<option value="" disabled data-v-8c496fa0>Place choose an application</option><option value="Aestate" data-v-8c496fa0>Aestate</option><option value="HelloHero" data-v-8c496fa0>Hello Hero</option><option value="ConsoleMini" data-v-8c496fa0>Console Mini</option><option value="URLEditor" data-v-8c496fa0>URL Editor</option><option value="JSONTree" data-v-8c496fa0>JSON Tree</option><option value="NoMedia" data-v-8c496fa0>No Media</option><option value="CashierDesk" data-v-8c496fa0>Cashier Desk</option><option value="ChatGPTWeb" data-v-8c496fa0>ChatGPTWeb</option><option value="Other" data-v-8c496fa0>Other</option>',10),ks=[ys],Ps={class:"form-item"},Gs=I(()=>b("label",{for:"description",style:{display:"flex"}},[_e("* Description "),b("small",{style:{"margin-left":"auto"},class:"text-secondary"},"Such as error content")],-1)),Os=["value"],Rs={class:"form-item"},As=I(()=>b("label",{for:"attachments",style:{display:"flex"}},[_e("Attachments "),b("small",{style:{"margin-left":"auto"},class:"text-secondary"},"Files or screenshots of the issue")],-1)),Ss={style:{display:"flex"}},Fs={class:"form-item"},Cs=I(()=>b("label",{for:"email",style:{display:"flex"}},[_e("Email "),b("small",{class:"text-secondary",style:{"margin-left":"auto"}},"To receive the status of the issue")],-1)),Us=["value"],Ds={class:"form-item"},Ls={key:0,class:"warning custom-block"},Is=I(()=>b("p",{class:"custom-block-title"},"WARNING",-1)),js=["disabled"],qs={key:2,class:"tip custom-block",style:{"text-align":"center"}},$s=I(()=>b("p",{class:"custom-block-title"},"Thanks for your feedback. Progress on the issue will be shown here:",-1)),xs=["href"],Bs=Ir({__name:"Feedback",setup(e){const t=new as({auth:ps}),s=$([]),n=()=>{s.value.forEach(y=>{t.rest.issues.get({owner:"PrimaAestate",repo:"feedback",issue_number:y.number}).then(E=>{Object.assign(y,E.data)})})},o=$({application:"",description:"",attachments:[],email:""});jr(()=>{try{s.value=JSON.parse(localStorage.getItem("FeedbackHistory")||"[]")}catch{}s.value.length&&setInterval(n,10*1e3);const{application:y}=location.search.slice(1).split("@").map(E=>{const[T,P]=E.split("=");return{[T]:P}}).reduce((E,T)=>({...E,...T}),{});y&&(o.value.application=y)});const l=$(!1),u=$(""),g=$(!1),_=$(""),w=$(""),f=$(!1),v=y=>new Promise((E,T)=>{const P=new FileReader;P.onloadend=()=>E(P.result),P.onerror=T,P.onabort=T,P.readAsDataURL(y)}),F=async(y,E)=>{let T=Date.now();return t.rest.repos.createOrUpdateFileContents({owner:"PrimaAestate",repo:"feedback",path:`${y}/attachments/${E.name.replace(/(\.\w+$)/,`_${++T}$1`)}`.replace(/\s/g,"_"),message:`[${y}/attachments] ${E.name}`,content:await v(E).then(P=>P.split("base64,")[1])}).then(P=>P.data.content.download_url)},S=async()=>{l.value=!1,g.value=!1;const{application:y,description:E,attachments:T,email:P}=o.value;if(!y||!E){u.value="Application/Description required.",l.value=!0;return}let j;T.length&&(f.value=!0,j=await Promise.all(T.map(G=>F(y,G).then(q=>`[${G.name}](${q})`))).catch(G=>(l.value=!0,u.value="Upload attachments error - "+String(G),Promise.reject(u.value))).finally(()=>{f.value=!1}));const B=`[${y}] ${E.slice(0,20)}`,W=`${E}${j?`

> Attachments
${j.join(`
`)}`:""}
>
> Created by ${P||"anonymous"} on the feedback page.

@yujinpan`;return f.value=!0,t.rest.issues.create({owner:"PrimaAestate",repo:"feedback",title:B,body:W}).then(G=>{g.value=!0,_.value=G.data.html_url,w.value=G.data.title,s.value.push(G.data),localStorage.setItem("FeedbackHistory",JSON.stringify(s.value))},G=>{l.value=!0,u.value=String(G)}).finally(()=>{f.value=!1})};function C(y){return new Date(y).toLocaleString()}return(y,E)=>(D(),L("div",ds,[gs,s.value.length?(D(),L("blockquote",ms,[hs,b("table",null,[_s,b("tbody",null,[(D(!0),L(Ve,null,Me(s.value,(T,P)=>(D(),L("tr",{key:P},[b("td",null,[b("a",{href:T.html_url},x(T.title),9,Es)]),b("td",null,x(T.state),1),b("td",null,x(C(T.created_at)),1),b("td",null,x(C(T.updated_at)),1)]))),128))])])])):ze("",!0),g.value?(D(),L("div",qs,[$s,b("p",null,[b("a",{href:_.value,target:"_blank"},x(w.value),9,xs)])])):(D(),L("div",Ts,[fs,b("div",bs,[ws,b("select",{onChange:E[0]||(E[0]=T=>o.value.application=T.target.value),value:o.value.application,class:qr({"is-placeholder":!o.value.application}),name:"application"},ks,42,vs)]),b("div",Ps,[Gs,b("textarea",{onInput:E[1]||(E[1]=T=>o.value.description=T.target.value),value:o.value.description,name:"description",rows:"6",placeholder:"The issue description"},null,40,Os)]),b("div",Rs,[As,b("div",Ss,[b("input",{ref:"attachments",onChange:E[2]||(E[2]=T=>o.value.attachments=Array.from(T.target.files)),type:"file",name:"attachments",multiple:""},null,544),b("button",{onClick:E[3]||(E[3]=T=>{y.$refs.attachments.value="",o.value.attachments=[]}),class:"clear-btn"},"Reset")]),b("ul",null,[(D(!0),L(Ve,null,Me(o.value.attachments,T=>(D(),L("li",null,x(T.name),1))),256))])]),b("div",Fs,[Cs,b("input",{onInput:E[4]||(E[4]=T=>o.value.email=T.target.value),value:o.value.email,name:"email",type:"email",placeholder:"Your email, not required"},null,40,Us)]),b("div",Ds,[l.value?(D(),L("div",Ls,[Is,b("p",null,x(u.value),1)])):ze("",!0),b("button",{class:"submit",onClick:E[5]||(E[5]=$r(T=>!f.value&&S(),["prevent"])),style:{position:"relative"},disabled:f.value},x(f.value?"Submitting...":"Submit Feedback"),9,js)])]))]))}}),Ws=Hr(Bs,[["__scopeId","data-v-8c496fa0"]]),ro=JSON.parse('{"title":"","description":"","frontmatter":{"aside":false},"headers":[],"relativePath":"Feedback.md","filePath":"Feedback.md"}'),Hs={name:"Feedback.md"},to=Object.assign(Hs,{setup(e){return(t,s)=>(D(),L("div",null,[Nr(Ws)]))}});export{ro as __pageData,to as default};
