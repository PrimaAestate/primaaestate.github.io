var Rr=Object.defineProperty;var Ar=(e,r,s)=>r in e?Rr(e,r,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[r]=s;var y=(e,r,s)=>(Ar(e,typeof r!="symbol"?r+"":r,s),s);import{d as Sr,j,o as N,c as M,l as v,n as Fr,t as ne,e as Ur,$ as Cr,p as Dr,q as Lr,a1 as Ir,_ as jr,I as qr}from"./chunks/framework.biRBrEtS.js";function X(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function me(e,r,s,n){if(typeof s!="function")throw new Error("method for before hook must be a function");return n||(n={}),Array.isArray(r)?r.reverse().reduce((o,u)=>me.bind(null,e,u,o,n),s)():Promise.resolve().then(()=>e.registry[r]?e.registry[r].reduce((o,u)=>u.hook.bind(null,o,n),s)():s(n))}function xr(e,r,s,n){const o=n;e.registry[s]||(e.registry[s]=[]),r==="before"&&(n=(u,c)=>Promise.resolve().then(o.bind(null,c)).then(u.bind(null,c))),r==="after"&&(n=(u,c)=>{let d;return Promise.resolve().then(u.bind(null,c)).then(h=>(d=h,o(d,c))).then(()=>d)}),r==="error"&&(n=(u,c)=>Promise.resolve().then(u.bind(null,c)).catch(d=>o(d,c))),e.registry[s].push({hook:n,orig:o})}function $r(e,r,s){if(!e.registry[r])return;const n=e.registry[r].map(o=>o.orig).indexOf(s);n!==-1&&e.registry[r].splice(n,1)}const We=Function.bind,He=We.bind(We);function Ye(e,r,s){const n=He($r,null).apply(null,s?[r,s]:[r]);e.api={remove:n},e.remove=n,["before","error","after","wrap"].forEach(o=>{const u=s?[r,o,s]:[r,o];e[o]=e.api[o]=He(xr,null).apply(null,u)})}function Br(){const e=Symbol("Singular"),r={registry:{}},s=me.bind(null,r,e);return Ye(s,r,e),s}function Wr(){const e={registry:{}},r=me.bind(null,e);return Ye(r,e),r}const Hr={Singular:Br,Collection:Wr};var Vr="0.0.0-development",Nr=`octokit-endpoint.js/${Vr} ${X()}`,Mr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Nr},mediaType:{format:""}};function zr(e){return e?Object.keys(e).reduce((r,s)=>(r[s.toLowerCase()]=e[s],r),{}):{}}function Kr(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const s=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof s=="function"&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}function Xe(e,r){const s=Object.assign({},e);return Object.keys(r).forEach(n=>{Kr(r[n])?n in e?s[n]=Xe(e[n],r[n]):Object.assign(s,{[n]:r[n]}):Object.assign(s,{[n]:r[n]})}),s}function Ve(e){for(const r in e)e[r]===void 0&&delete e[r];return e}function pe(e,r,s){var o;if(typeof r=="string"){let[u,c]=r.split(" ");s=Object.assign(c?{method:u,url:c}:{url:u},s)}else s=Object.assign({},r);s.headers=zr(s.headers),Ve(s),Ve(s.headers);const n=Xe(e||{},s);return s.url==="/graphql"&&(e&&((o=e.mediaType.previews)!=null&&o.length)&&(n.mediaType.previews=e.mediaType.previews.filter(u=>!n.mediaType.previews.includes(u)).concat(n.mediaType.previews)),n.mediaType.previews=(n.mediaType.previews||[]).map(u=>u.replace(/-preview/,""))),n}function Jr(e,r){const s=/\?/.test(e)?"&":"?",n=Object.keys(r);return n.length===0?e:e+s+n.map(o=>o==="q"?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${o}=${encodeURIComponent(r[o])}`).join("&")}var Qr=/\{[^}]+\}/g;function Yr(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function Xr(e){const r=e.match(Qr);return r?r.map(Yr).reduce((s,n)=>s.concat(n),[]):[]}function Ne(e,r){const s={__proto__:null};for(const n of Object.keys(e))r.indexOf(n)===-1&&(s[n]=e[n]);return s}function Ze(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(r){return/%[0-9A-Fa-f]/.test(r)||(r=encodeURI(r).replace(/%5B/g,"[").replace(/%5D/g,"]")),r}).join("")}function x(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(r){return"%"+r.charCodeAt(0).toString(16).toUpperCase()})}function V(e,r,s){return r=e==="+"||e==="#"?Ze(r):x(r),s?x(s)+"="+r:r}function q(e){return e!=null}function ie(e){return e===";"||e==="&"||e==="?"}function Zr(e,r,s,n){var o=e[s],u=[];if(q(o)&&o!=="")if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")o=o.toString(),n&&n!=="*"&&(o=o.substring(0,parseInt(n,10))),u.push(V(r,o,ie(r)?s:""));else if(n==="*")Array.isArray(o)?o.filter(q).forEach(function(c){u.push(V(r,c,ie(r)?s:""))}):Object.keys(o).forEach(function(c){q(o[c])&&u.push(V(r,o[c],c))});else{const c=[];Array.isArray(o)?o.filter(q).forEach(function(d){c.push(V(r,d))}):Object.keys(o).forEach(function(d){q(o[d])&&(c.push(x(d)),c.push(V(r,o[d].toString())))}),ie(r)?u.push(x(s)+"="+c.join(",")):c.length!==0&&u.push(c.join(","))}else r===";"?q(o)&&u.push(x(s)):o===""&&(r==="&"||r==="?")?u.push(x(s)+"="):o===""&&u.push("");return u}function et(e){return{expand:rt.bind(null,e)}}function rt(e,r){var s=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(n,o,u){if(o){let d="";const h=[];if(s.indexOf(o.charAt(0))!==-1&&(d=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(E){var T=/([^:\*]*)(?::(\d+)|(\*))?/.exec(E);h.push(Zr(r,d,T[1],T[2]||T[3]))}),d&&d!=="+"){var c=",";return d==="?"?c="&":d!=="#"&&(c=d),(h.length!==0?d:"")+h.join(c)}else return h.join(",")}else return Ze(u)}),e==="/"?e:e.replace(/\/$/,"")}function er(e){var T;let r=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),n=Object.assign({},e.headers),o,u=Ne(e,["method","baseUrl","url","headers","request","mediaType"]);const c=Xr(s);s=et(s).expand(u),/^http/.test(s)||(s=e.baseUrl+s);const d=Object.keys(e).filter(f=>c.includes(f)).concat("baseUrl"),h=Ne(u,d);if(!/application\/octet-stream/i.test(n.accept)&&(e.mediaType.format&&(n.accept=n.accept.split(/,/).map(f=>f.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),s.endsWith("/graphql")&&(T=e.mediaType.previews)!=null&&T.length)){const f=n.accept.match(/[\w-]+(?=-preview)/g)||[];n.accept=f.concat(e.mediaType.previews).map(R=>{const O=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${R}-preview${O}`}).join(",")}return["GET","HEAD"].includes(r)?s=Jr(s,h):"data"in h?o=h.data:Object.keys(h).length&&(o=h),!n["content-type"]&&typeof o<"u"&&(n["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&typeof o>"u"&&(o=""),Object.assign({method:r,url:s,headers:n},typeof o<"u"?{body:o}:null,e.request?{request:e.request}:null)}function tt(e,r,s){return er(pe(e,r,s))}function rr(e,r){const s=pe(e,r),n=tt.bind(null,s);return Object.assign(n,{DEFAULTS:s,defaults:rr.bind(null,s),merge:pe.bind(null,s),parse:er})}var st=rr(null,Mr);class z extends Error{constructor(s,n,o){super(s);y(this,"name");y(this,"status");y(this,"request");y(this,"response");this.name="HttpError",this.status=Number.parseInt(n),Number.isNaN(this.status)&&(this.status=0),"response"in o&&(this.response=o.response);const u=Object.assign({},o.request);o.request.headers.authorization&&(u.headers=Object.assign({},o.request.headers,{authorization:o.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),u.url=u.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=u}}var ot="0.0.0-development",nt={headers:{"user-agent":`octokit-request.js/${ot} ${X()}`}};function it(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const r=Object.getPrototypeOf(e);if(r===null)return!0;const s=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return typeof s=="function"&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}async function Me(e){var f,R,O,U,A;const r=((f=e.request)==null?void 0:f.fetch)||globalThis.fetch;if(!r)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const s=((R=e.request)==null?void 0:R.log)||console,n=((O=e.request)==null?void 0:O.parseSuccessResponseBody)!==!1,o=it(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,u=Object.fromEntries(Object.entries(e.headers).map(([w,k])=>[w,String(k)]));let c;try{c=await r(e.url,{method:e.method,body:o,redirect:(U=e.request)==null?void 0:U.redirect,headers:u,signal:(A=e.request)==null?void 0:A.signal,...e.body&&{duplex:"half"}})}catch(w){let k="Unknown Error";if(w instanceof Error){if(w.name==="AbortError")throw w.status=500,w;k=w.message,w.name==="TypeError"&&"cause"in w&&(w.cause instanceof Error?k=w.cause.message:typeof w.cause=="string"&&(k=w.cause))}const S=new z(k,500,{request:e});throw S.cause=w,S}const d=c.status,h=c.url,E={};for(const[w,k]of c.headers)E[w]=k;const T={url:h,status:d,headers:E,data:""};if("deprecation"in E){const w=E.link&&E.link.match(/<([^>]+)>; rel="deprecation"/),k=w&&w.pop();s.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${E.sunset}${k?`. See ${k}`:""}`)}if(d===204||d===205)return T;if(e.method==="HEAD"){if(d<400)return T;throw new z(c.statusText,d,{response:T,request:e})}if(d===304)throw T.data=await ae(c),new z("Not modified",d,{response:T,request:e});if(d>=400)throw T.data=await ae(c),new z(at(T.data),d,{response:T,request:e});return T.data=n?await ae(c):c.body,T}async function ae(e){const r=e.headers.get("content-type");return/application\/json/.test(r)?e.json().catch(()=>e.text()).catch(()=>""):!r||/^text\/|charset=utf-8$/.test(r)?e.text():e.arrayBuffer()}function at(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const r="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(s=>JSON.stringify(s)).join(", ")}${r}`:`${e.message}${r}`}return`Unknown error: ${JSON.stringify(e)}`}function de(e,r){const s=e.defaults(r);return Object.assign(function(o,u){const c=s.merge(o,u);if(!c.request||!c.request.hook)return Me(s.parse(c));const d=(h,E)=>Me(s.parse(s.merge(h,E)));return Object.assign(d,{endpoint:s,defaults:de.bind(null,s)}),c.request.hook(d,c)},{endpoint:s,defaults:de.bind(null,s)})}var ge=de(st,nt),ct="0.0.0-development";function lt(e){return`Request failed due to following response errors:
`+e.errors.map(r=>` - ${r.message}`).join(`
`)}var ut=class extends Error{constructor(r,s,n){super(lt(n));y(this,"name","GraphqlResponseError");y(this,"errors");y(this,"data");this.request=r,this.headers=s,this.response=n,this.errors=n.errors,this.data=n.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},pt=["method","baseUrl","url","headers","request","query","mediaType"],dt=["query","method","url"],ze=/\/api\/v3\/?$/;function gt(e,r,s){if(s){if(typeof r=="string"&&"query"in s)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const c in s)if(dt.includes(c))return Promise.reject(new Error(`[@octokit/graphql] "${c}" cannot be used as variable name`))}const n=typeof r=="string"?Object.assign({query:r},s):r,o=Object.keys(n).reduce((c,d)=>pt.includes(d)?(c[d]=n[d],c):(c.variables||(c.variables={}),c.variables[d]=n[d],c),{}),u=n.baseUrl||e.endpoint.DEFAULTS.baseUrl;return ze.test(u)&&(o.url=u.replace(ze,"/api/graphql")),e(o).then(c=>{if(c.data.errors){const d={};for(const h of Object.keys(c.headers))d[h]=c.headers[h];throw new ut(o,d,c.data)}return c.data.data})}function he(e,r){const s=e.defaults(r);return Object.assign((o,u)=>gt(s,o,u),{defaults:he.bind(null,s),endpoint:s.endpoint})}he(ge,{headers:{"user-agent":`octokit-graphql.js/${ct} ${X()}`},method:"POST",url:"/graphql"});function mt(e){return he(e,{method:"POST",url:"/graphql"})}var ht=/^v1\./,_t=/^ghs_/,Et=/^ghu_/;async function Tt(e){const r=e.split(/\./).length===3,s=ht.test(e)||_t.test(e),n=Et.test(e);return{type:"token",token:e,tokenType:r?"app":s?"installation":n?"user-to-server":"oauth"}}function ft(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function bt(e,r,s,n){const o=r.endpoint.merge(s,n);return o.headers.authorization=ft(e),r(o)}var wt=function(r){if(!r)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof r!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return r=r.replace(/^(token|bearer) +/i,""),Object.assign(Tt.bind(null,r),{hook:bt.bind(null,r)})};const tr="6.1.2",Ke=()=>{},vt=console.warn.bind(console),yt=console.error.bind(console),Je=`octokit-core.js/${tr} ${X()}`;var Y;let kt=(Y=class{constructor(r={}){y(this,"request");y(this,"graphql");y(this,"log");y(this,"hook");y(this,"auth");const s=new Hr.Collection,n={baseUrl:ge.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:s.bind(null,"request")}),mediaType:{previews:[],format:""}};if(n.headers["user-agent"]=r.userAgent?`${r.userAgent} ${Je}`:Je,r.baseUrl&&(n.baseUrl=r.baseUrl),r.previews&&(n.mediaType.previews=r.previews),r.timeZone&&(n.headers["time-zone"]=r.timeZone),this.request=ge.defaults(n),this.graphql=mt(this.request).defaults(n),this.log=Object.assign({debug:Ke,info:Ke,warn:vt,error:yt},r.log),this.hook=s,r.authStrategy){const{authStrategy:u,...c}=r,d=u(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:c},r.auth));s.wrap("request",d.hook),this.auth=d}else if(!r.auth)this.auth=async()=>({type:"unauthenticated"});else{const u=wt(r.auth);s.wrap("request",u.hook),this.auth=u}const o=this.constructor;for(let u=0;u<o.plugins.length;++u)Object.assign(this,o.plugins[u](this,r))}static defaults(r){return class extends this{constructor(...n){const o=n[0]||{};if(typeof r=="function"){super(r(o));return}super(Object.assign({},r,o,o.userAgent&&r.userAgent?{userAgent:`${o.userAgent} ${r.userAgent}`}:null))}}}static plugin(...r){var o;const s=this.plugins;return o=class extends this{},y(o,"plugins",s.concat(r.filter(u=>!s.includes(u)))),o}},y(Y,"VERSION",tr),y(Y,"plugins",[]),Y);var Pt="0.0.0-development";function Gt(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const s=e.data.incomplete_results,n=e.data.repository_selection,o=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const u=Object.keys(e.data)[0],c=e.data[u];return e.data=c,typeof s<"u"&&(e.data.incomplete_results=s),typeof n<"u"&&(e.data.repository_selection=n),e.data.total_count=o,e}function _e(e,r,s){const n=typeof r=="function"?r.endpoint(s):e.request.endpoint(r,s),o=typeof r=="function"?r:e.request,u=n.method,c=n.headers;let d=n.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!d)return{done:!0};try{const h=await o({method:u,url:d,headers:c}),E=Gt(h);return d=((E.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:E}}catch(h){if(h.status!==409)throw h;return d="",{value:{status:200,headers:{},data:[]}}}}})}}function sr(e,r,s,n){return typeof s=="function"&&(n=s,s=void 0),or(e,[],_e(e,r,s)[Symbol.asyncIterator](),n)}function or(e,r,s,n){return s.next().then(o=>{if(o.done)return r;let u=!1;function c(){u=!0}return r=r.concat(n?n(o.value,c):o.value.data),u?r:or(e,r,s,n)})}Object.assign(sr,{iterator:_e});function nr(e){return{paginate:Object.assign(sr.bind(null,e),{iterator:_e.bind(null,e)})}}nr.VERSION=Pt;var Ot=(e,r)=>`The cursor at "${e.join(",")}" did not change its value "${r}" after a page transition. Please make sure your that your query is set up correctly.`,Rt=class extends Error{constructor(r,s){super(Ot(r.pathInQuery,s));y(this,"name","MissingCursorChangeError");this.pageInfo=r,this.cursorValue=s,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},At=class extends Error{constructor(r){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(r,null,2)}`);y(this,"name","MissingPageInfo");this.response=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},St=e=>Object.prototype.toString.call(e)==="[object Object]";function ir(e){const r=ar(e,"pageInfo");if(r.length===0)throw new At(e);return r}var ar=(e,r,s=[])=>{for(const n of Object.keys(e)){const o=[...s,n],u=e[n];if(St(u)){if(u.hasOwnProperty(r))return o;const c=ar(u,r,o);if(c.length>0)return c}}return[]},K=(e,r)=>r.reduce((s,n)=>s[n],e),ce=(e,r,s)=>{const n=r[r.length-1],o=[...r].slice(0,-1),u=K(e,o);typeof s=="function"?u[n]=s(u[n]):u[n]=s},Ft=e=>{const r=ir(e);return{pathInQuery:r,pageInfo:K(e,[...r,"pageInfo"])}},cr=e=>e.hasOwnProperty("hasNextPage"),Ut=e=>cr(e)?e.endCursor:e.startCursor,Ct=e=>cr(e)?e.hasNextPage:e.hasPreviousPage,lr=e=>(r,s={})=>{let n=!0,o={...s};return{[Symbol.asyncIterator]:()=>({async next(){if(!n)return{done:!0,value:{}};const u=await e.graphql(r,o),c=Ft(u),d=Ut(c.pageInfo);if(n=Ct(c.pageInfo),n&&d===o.cursor)throw new Rt(c,d);return o={...o,cursor:d},{done:!1,value:u}}})}},Dt=(e,r)=>{if(Object.keys(e).length===0)return Object.assign(e,r);const s=ir(e),n=[...s,"nodes"],o=K(r,n);o&&ce(e,n,h=>[...h,...o]);const u=[...s,"edges"],c=K(r,u);c&&ce(e,u,h=>[...h,...c]);const d=[...s,"pageInfo"];return ce(e,d,K(r,d)),e},Lt=e=>{const r=lr(e);return async(s,n={})=>{let o={};for await(const u of r(s,n))o=Dt(o,u);return o}};function It(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(Lt(e),{iterator:lr(e)})})}}const jt="13.2.6",qt={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var xt=qt;const D=new Map;for(const[e,r]of Object.entries(xt))for(const[s,n]of Object.entries(r)){const[o,u,c]=n,[d,h]=o.split(/ /),E=Object.assign({method:d,url:h},u);D.has(e)||D.set(e,new Map),D.get(e).set(s,{scope:e,methodName:s,endpointDefaults:E,decorations:c})}const $t={has({scope:e},r){return D.get(e).has(r)},getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,r,s){return Object.defineProperty(e.cache,r,s),!0},deleteProperty(e,r){return delete e.cache[r],!0},ownKeys({scope:e}){return[...D.get(e).keys()]},set(e,r,s){return e.cache[r]=s},get({octokit:e,scope:r,cache:s},n){if(s[n])return s[n];const o=D.get(r).get(n);if(!o)return;const{endpointDefaults:u,decorations:c}=o;return c?s[n]=Wt(e,r,n,u,c):s[n]=e.request.defaults(u),s[n]}};function Bt(e){const r={};for(const s of D.keys())r[s]=new Proxy({octokit:e,scope:s,cache:{}},$t);return r}function Wt(e,r,s,n,o){const u=e.request.defaults(n);function c(...d){let h=u.endpoint.merge(...d);if(o.mapToData)return h=Object.assign({},h,{data:h[o.mapToData],[o.mapToData]:void 0}),u(h);if(o.renamed){const[E,T]=o.renamed;e.log.warn(`octokit.${r}.${s}() has been renamed to octokit.${E}.${T}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const E=u.endpoint.merge(...d);for(const[T,f]of Object.entries(o.renamedParameters))T in E&&(e.log.warn(`"${T}" parameter is deprecated for "octokit.${r}.${s}()". Use "${f}" instead`),f in E||(E[f]=E[T]),delete E[T]);return u(E)}return u(...d)}return Object.assign(c,u)}function ur(e){return{rest:Bt(e)}}ur.VERSION=jt;var le=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Ht(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var pr={exports:{}};(function(e,r){(function(s,n){e.exports=n()})(le,function(){var s=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof le<"u"?le:typeof self<"u"?self:{};function n(_){return _&&_.default||_}var o=function(_,i,t={}){var a,l,p;for(a in i)p=i[a],t[a]=(l=_[a])!=null?l:p;return t},u=function(_,i,t={}){var a,l;for(a in _)l=_[a],i[a]!==void 0&&(t[a]=l);return t},c={load:o,overwrite:u},d;d=class{constructor(i,t){this.incr=i,this.decr=t,this._first=null,this._last=null,this.length=0}push(i){var t;this.length++,typeof this.incr=="function"&&this.incr(),t={value:i,prev:this._last,next:null},this._last!=null?(this._last.next=t,this._last=t):this._first=this._last=t}shift(){var i;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),i=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,i}first(){if(this._first!=null)return this._first.value}getArray(){var i,t,a;for(i=this._first,a=[];i!=null;)a.push((t=i,i=i.next,t.value));return a}forEachShift(i){var t;for(t=this.shift();t!=null;)i(t),t=this.shift()}debug(){var i,t,a,l,p;for(i=this._first,p=[];i!=null;)p.push((t=i,i=i.next,{value:t.value,prev:(a=t.prev)!=null?a.value:void 0,next:(l=t.next)!=null?l.value:void 0}));return p}};var h=d,E;E=class{constructor(i){if(this.instance=i,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(t,a)=>this._addListener(t,"many",a),this.instance.once=(t,a)=>this._addListener(t,"once",a),this.instance.removeAllListeners=(t=null)=>t!=null?delete this._events[t]:this._events={}}_addListener(i,t,a){var l;return(l=this._events)[i]==null&&(l[i]=[]),this._events[i].push({cb:a,status:t}),this.instance}listenerCount(i){return this._events[i]!=null?this._events[i].length:0}async trigger(i,...t){var a,l;try{return i!=="debug"&&this.trigger("debug",`Event triggered: ${i}`,t),this._events[i]==null?void 0:(this._events[i]=this._events[i].filter(function(p){return p.status!=="none"}),l=this._events[i].map(async p=>{var g,m;if(p.status!=="none"){p.status==="once"&&(p.status="none");try{return m=typeof p.cb=="function"?p.cb(...t):void 0,typeof(m!=null?m.then:void 0)=="function"?await m:m}catch(b){return g=b,this.trigger("error",g),null}}}),(await Promise.all(l)).find(function(p){return p!=null}))}catch(p){return a=p,this.trigger("error",a),null}}};var T=E,f,R,O;f=h,R=T,O=class{constructor(i){this.Events=new R(this),this._length=0,this._lists=(function(){var t,a,l;for(l=[],t=1,a=i;1<=a?t<=a:t>=a;1<=a?++t:--t)l.push(new f(()=>this.incr(),()=>this.decr()));return l}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(i){return this._lists[i.options.priority].push(i)}queued(i){return i!=null?this._lists[i].length:this._length}shiftAll(i){return this._lists.forEach(function(t){return t.forEachShift(i)})}getFirst(i=this._lists){var t,a,l;for(t=0,a=i.length;t<a;t++)if(l=i[t],l.length>0)return l;return[]}shiftLastFrom(i){return this.getFirst(this._lists.slice(i).reverse()).shift()}};var U=O,A;A=class extends Error{};var w=A,k,S,J,B,W;B=10,S=5,W=c,k=w,J=class{constructor(i,t,a,l,p,g,m,b){this.task=i,this.args=t,this.rejectOnDrop=p,this.Events=g,this._states=m,this.Promise=b,this.options=W.load(a,l),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===l.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((P,G)=>{this._resolve=P,this._reject=G}),this.retryCount=0}_sanitizePriority(i){var t;return t=~~i!==i?S:i,t<0?0:t>B-1?B-1:t}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:i,message:t="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(i??new k(t)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(i){var t;if(t=this._states.jobStatus(this.options.id),!(t===i||i==="DONE"&&t===null))throw new k(`Invalid job status ${t}, expected ${i}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(i,t){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:i,blocked:t})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(i,t,a,l){var p,g,m;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),g={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",g);try{if(m=await(i!=null?i.schedule(this.options,this.task,...this.args):this.task(...this.args)),t())return this.doDone(g),await l(this.options,g),this._assertStatus("DONE"),this._resolve(m)}catch(b){return p=b,this._onFailure(p,g,t,a,l)}}doExpire(i,t,a){var l,p;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),p={args:this.args,options:this.options,retryCount:this.retryCount},l=new k(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(l,p,i,t,a)}async _onFailure(i,t,a,l,p){var g,m;if(a())return g=await this.Events.trigger("failed",i,t),g!=null?(m=~~g,this.Events.trigger("retry",`Retrying ${this.options.id} after ${m} ms`,t),this.retryCount++,l(m)):(this.doDone(t),await p(this.options,t),this._assertStatus("DONE"),this._reject(i))}doDone(i){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",i)}};var C=J,I,Z,ee;ee=c,I=w,Z=class{constructor(i,t,a){this.instance=i,this.storeOptions=t,this.clientId=this.instance._randomIndex(),ee.load(a,a,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var i;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(i=this.heartbeat=setInterval(()=>{var t,a,l,p,g;if(p=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&p>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=p,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&p>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:t,reservoirIncreaseMaximum:l,reservoir:g}=this.storeOptions,this._lastReservoirIncrease=p,a=l!=null?Math.min(t,l-g):t,a>0))return this.storeOptions.reservoir+=a,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?i.unref():void 0:clearInterval(this.heartbeat)}async __publish__(i){return await this.yieldLoop(),this.instance.Events.trigger("message",i.toString())}async __disconnect__(i){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(i=0){return new this.Promise(function(t,a){return setTimeout(t,i)})}computePenalty(){var i;return(i=this.storeOptions.penalty)!=null?i:15*this.storeOptions.minTime||5e3}async __updateSettings__(i){return await this.yieldLoop(),ee.overwrite(i,i,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(i){return await this.yieldLoop(),this._nextRequest+this.timeout<i}computeCapacity(){var i,t;return{maxConcurrent:i,reservoir:t}=this.storeOptions,i!=null&&t!=null?Math.min(i-this._running,t):i!=null?i-this._running:t??null}conditionsCheck(i){var t;return t=this.computeCapacity(),t==null||i<=t}async __incrementReservoir__(i){var t;return await this.yieldLoop(),t=this.storeOptions.reservoir+=i,this.instance._drainAll(this.computeCapacity()),t}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(i){return this._unblockTime>=i}check(i,t){return this.conditionsCheck(i)&&this._nextRequest-t<=0}async __check__(i){var t;return await this.yieldLoop(),t=Date.now(),this.check(i,t)}async __register__(i,t,a){var l,p;return await this.yieldLoop(),l=Date.now(),this.conditionsCheck(t)?(this._running+=t,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=t),p=Math.max(this._nextRequest-l,0),this._nextRequest=l+p+this.storeOptions.minTime,{success:!0,wait:p,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(i,t){var a,l,p;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&t>this.storeOptions.maxConcurrent)throw new I(`Impossible to add a job having a weight of ${t} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return l=Date.now(),p=this.storeOptions.highWater!=null&&i===this.storeOptions.highWater&&!this.check(t,l),a=this.strategyIsBlock()&&(p||this.isBlocked(l)),a&&(this._unblockTime=l+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:p,blocked:a,strategy:this.storeOptions.strategy}}async __free__(i,t){return await this.yieldLoop(),this._running-=t,this._done+=t,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var _r=Z,Te,fe;Te=w,fe=class{constructor(i){this.status=i,this._jobs={},this.counts=this.status.map(function(){return 0})}next(i){var t,a;if(t=this._jobs[i],a=t+1,t!=null&&a<this.status.length)return this.counts[t]--,this.counts[a]++,this._jobs[i]++;if(t!=null)return this.counts[t]--,delete this._jobs[i]}start(i){var t;return t=0,this._jobs[i]=t,this.counts[t]++}remove(i){var t;return t=this._jobs[i],t!=null&&(this.counts[t]--,delete this._jobs[i]),t!=null}jobStatus(i){var t;return(t=this.status[this._jobs[i]])!=null?t:null}statusJobs(i){var t,a,l,p,g;if(i!=null){if(a=this.status.indexOf(i),a<0)throw new Te(`status must be one of ${this.status.join(", ")}`);l=this._jobs,p=[];for(t in l)g=l[t],g===a&&p.push(t);return p}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((i,t,a)=>(i[this.status[a]]=t,i),{})}};var Er=fe,be,we;be=h,we=class{constructor(i,t){this.schedule=this.schedule.bind(this),this.name=i,this.Promise=t,this._running=0,this._queue=new be}isEmpty(){return this._queue.length===0}async _tryToRun(){var i,t,a,l,p,g,m;if(this._running<1&&this._queue.length>0)return this._running++,{task:m,args:i,resolve:p,reject:l}=this._queue.shift(),t=await async function(){try{return g=await m(...i),function(){return p(g)}}catch(b){return a=b,function(){return l(a)}}}(),this._running--,this._tryToRun(),t()}schedule(i,...t){var a,l,p;return p=l=null,a=new this.Promise(function(g,m){return p=g,l=m}),this._queue.push({task:i,args:t,resolve:p,reject:l}),this._tryToRun(),a}};var Tr=we,ve="2.19.5",fr={version:ve},br=Object.freeze({version:ve,default:fr}),ye=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),ke=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),wr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Pe,Ge,Oe,Re,Ae,Q;Q=c,Pe=T,Re=ye,Oe=ke,Ae=wr,Ge=(function(){class _{constructor(t={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=t,Q.load(this.limiterOptions,this.defaults,this),this.Events=new Pe(this),this.instances={},this.Bottleneck=$e,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new Re(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new Oe(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(t=""){var a;return(a=this.instances[t])!=null?a:(()=>{var l;return l=this.instances[t]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${t}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",l,t),l})()}async deleteKey(t=""){var a,l;return l=this.instances[t],this.connection&&(a=await this.connection.__runCommand__(["del",...Ae.allKeys(`${this.id}-${t}`)])),l!=null&&(delete this.instances[t],await l.disconnect()),l!=null||a>0}limiters(){var t,a,l,p;a=this.instances,l=[];for(t in a)p=a[t],l.push({key:t,limiter:p});return l}keys(){return Object.keys(this.instances)}async clusterKeys(){var t,a,l,p,g,m,b,P,G;if(this.connection==null)return this.Promise.resolve(this.keys());for(m=[],t=null,G=`b_${this.id}-`.length,a=9;t!==0;)for([P,l]=await this.connection.__runCommand__(["scan",t??0,"match",`b_${this.id}-*_settings`,"count",1e4]),t=~~P,p=0,b=l.length;p<b;p++)g=l[p],m.push(g.slice(G,-a));return m}_startAutoCleanup(){var t;return clearInterval(this.interval),typeof(t=this.interval=setInterval(async()=>{var a,l,p,g,m,b;m=Date.now(),p=this.instances,g=[];for(l in p){b=p[l];try{await b._store.__groupCheck__(m)?g.push(this.deleteKey(l)):g.push(void 0)}catch(P){a=P,g.push(b.Events.trigger("error",a))}}return g},this.timeout/2)).unref=="function"?t.unref():void 0}updateSettings(t={}){if(Q.overwrite(t,this.defaults,this),Q.overwrite(t,t,this.limiterOptions),t.timeout!=null)return this._startAutoCleanup()}disconnect(t=!0){var a;if(!this.sharedConnection)return(a=this.connection)!=null?a.disconnect(t):void 0}}return _.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},_}).call(s);var vr=Ge,Se,Fe,Ue;Ue=c,Fe=T,Se=(function(){class _{constructor(t={}){this.options=t,Ue.load(this.options,this.defaults,this),this.Events=new Fe(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((t,a)=>this._resolve=t)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(t){var a;return this._arr.push(t),a=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),a}}return _.prototype.defaults={maxTime:null,maxSize:null,Promise},_}).call(s);var yr=Se,kr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Pr=n(br),Ce,De,re,te,Le,se,Ie,je,qe,oe,F,xe=[].splice;se=10,De=5,F=c,Ie=U,te=C,Le=_r,je=kr,re=T,qe=Er,oe=Tr,Ce=(function(){class _{constructor(t={},...a){var l,p;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(t,a),F.load(t,this.instanceDefaults,this),this._queues=new Ie(se),this._scheduled={},this._states=new qe(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new re(this),this._submitLock=new oe("submit",this.Promise),this._registerLock=new oe("register",this.Promise),p=F.load(t,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return l=F.load(t,this.redisStoreDefaults,{}),new je(this,p,l);if(this.datastore==="local")return l=F.load(t,this.localStoreDefaults,{}),new Le(this,p,l);throw new _.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var g;return(g=this._store.heartbeat)!=null&&typeof g.ref=="function"?g.ref():void 0}),this._queues.on("zero",()=>{var g;return(g=this._store.heartbeat)!=null&&typeof g.unref=="function"?g.unref():void 0})}_validateOptions(t,a){if(!(t!=null&&typeof t=="object"&&a.length===0))throw new _.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(t){return this._store.__publish__(t)}disconnect(t=!0){return this._store.__disconnect__(t)}chain(t){return this._limiter=t,this}queued(t){return this._queues.queued(t)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(t){return this._states.jobStatus(t)}jobs(t){return this._states.statusJobs(t)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(t=1){return this._store.__check__(t)}_clearGlobalState(t){return this._scheduled[t]!=null?(clearTimeout(this._scheduled[t].expiration),delete this._scheduled[t],!0):!1}async _free(t,a,l,p){var g,m;try{if({running:m}=await this._store.__free__(t,l.weight),this.Events.trigger("debug",`Freed ${l.id}`,p),m===0&&this.empty())return this.Events.trigger("idle")}catch(b){return g=b,this.Events.trigger("error",g)}}_run(t,a,l){var p,g,m;return a.doRun(),p=this._clearGlobalState.bind(this,t),m=this._run.bind(this,t,a),g=this._free.bind(this,t,a),this._scheduled[t]={timeout:setTimeout(()=>a.doExecute(this._limiter,p,m,g),l),expiration:a.options.expiration!=null?setTimeout(function(){return a.doExpire(p,m,g)},l+a.options.expiration):void 0,job:a}}_drainOne(t){return this._registerLock.schedule(()=>{var a,l,p,g,m;return this.queued()===0?this.Promise.resolve(null):(m=this._queues.getFirst(),{options:g,args:a}=p=m.first(),t!=null&&g.weight>t?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${g.id}`,{args:a,options:g}),l=this._randomIndex(),this._store.__register__(l,g.weight,g.expiration).then(({success:b,wait:P,reservoir:G})=>{var H;return this.Events.trigger("debug",`Drained ${g.id}`,{success:b,args:a,options:g}),b?(m.shift(),H=this.empty(),H&&this.Events.trigger("empty"),G===0&&this.Events.trigger("depleted",H),this._run(l,p,P),this.Promise.resolve(g.weight)):this.Promise.resolve(null)})))})}_drainAll(t,a=0){return this._drainOne(t).then(l=>{var p;return l!=null?(p=t!=null?t-l:t,this._drainAll(p,a+l)):this.Promise.resolve(a)}).catch(l=>this.Events.trigger("error",l))}_dropAllQueued(t){return this._queues.shiftAll(function(a){return a.doDrop({message:t})})}stop(t={}){var a,l;return t=F.load(t,this.stopDefaults),l=p=>{var g;return g=()=>{var m;return m=this._states.counts,m[0]+m[1]+m[2]+m[3]===p},new this.Promise((m,b)=>g()?m():this.on("done",()=>{if(g())return this.removeAllListeners("done"),m()}))},a=t.dropWaitingJobs?(this._run=function(p,g){return g.doDrop({message:t.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var p,g,m;g=this._scheduled;for(p in g)m=g[p],this.jobStatus(m.job.options.id)==="RUNNING"&&(clearTimeout(m.timeout),clearTimeout(m.expiration),m.job.doDrop({message:t.dropErrorMessage}));return this._dropAllQueued(t.dropErrorMessage),l(0)}))):this.schedule({priority:se-1,weight:0},()=>l(1)),this._receive=function(p){return p._reject(new _.prototype.BottleneckError(t.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new _.prototype.BottleneckError("stop() has already been called")),a}async _addToQueue(t){var a,l,p,g,m,b,P;({args:a,options:g}=t);try{({reachedHWM:m,blocked:l,strategy:P}=await this._store.__submit__(this.queued(),g.weight))}catch(G){return p=G,this.Events.trigger("debug",`Could not queue ${g.id}`,{args:a,options:g,error:p}),t.doDrop({error:p}),!1}return l?(t.doDrop(),!0):m&&(b=P===_.prototype.strategy.LEAK?this._queues.shiftLastFrom(g.priority):P===_.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(g.priority+1):P===_.prototype.strategy.OVERFLOW?t:void 0,b!=null&&b.doDrop(),b==null||P===_.prototype.strategy.OVERFLOW)?(b==null&&t.doDrop(),m):(t.doQueue(m,l),this._queues.push(t),await this._drainAll(),m)}_receive(t){return this._states.jobStatus(t.options.id)!=null?(t._reject(new _.prototype.BottleneckError(`A job with the same id already exists (id=${t.options.id})`)),!1):(t.doReceive(),this._submitLock.schedule(this._addToQueue,t))}submit(...t){var a,l,p,g,m,b,P;return typeof t[0]=="function"?(m=t,[l,...t]=m,[a]=xe.call(t,-1),g=F.load({},this.jobDefaults)):(b=t,[g,l,...t]=b,[a]=xe.call(t,-1),g=F.load(g,this.jobDefaults)),P=(...G)=>new this.Promise(function(H,Or){return l(...G,function(...Be){return(Be[0]!=null?Or:H)(Be)})}),p=new te(P,t,g,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),p.promise.then(function(G){return typeof a=="function"?a(...G):void 0}).catch(function(G){return Array.isArray(G)?typeof a=="function"?a(...G):void 0:typeof a=="function"?a(G):void 0}),this._receive(p)}schedule(...t){var a,l,p;return typeof t[0]=="function"?([p,...t]=t,l={}):[l,p,...t]=t,a=new te(p,t,l,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(a),a.promise}wrap(t){var a,l;return a=this.schedule.bind(this),l=function(...p){return a(t.bind(this),...p)},l.withOptions=function(p,...g){return a(p,t,...g)},l}async updateSettings(t={}){return await this._store.__updateSettings__(F.overwrite(t,this.storeDefaults)),F.overwrite(t,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(t=0){return this._store.__incrementReservoir__(t)}}return _.default=_,_.Events=re,_.version=_.prototype.version=Pr.version,_.strategy=_.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},_.BottleneckError=_.prototype.BottleneckError=w,_.Group=_.prototype.Group=vr,_.RedisConnection=_.prototype.RedisConnection=ye,_.IORedisConnection=_.prototype.IORedisConnection=ke,_.Batcher=_.prototype.Batcher=yr,_.prototype.jobDefaults={priority:De,weight:1,expiration:null,id:"<no-id>"},_.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:_.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},_.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},_.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},_.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},_.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},_}).call(s);var $e=Ce,Gr=$e;return Gr})})(pr);var Vt=pr.exports;const dr=Ht(Vt);var Nt="0.0.0-development";async function gr(e,r,s,n){if(!s.request||!s.request.request)throw s;if(s.status>=400&&!e.doNotRetry.includes(s.status)){const o=n.request.retries!=null?n.request.retries:e.retries,u=Math.pow((n.request.retryCount||0)+1,2);throw r.retry.retryRequest(s,o,u)}throw s}async function Mt(e,r,s,n){const o=new dr;return o.on("failed",function(u,c){const d=~~u.request.request.retries,h=~~u.request.request.retryAfter;if(n.request.retryCount=c.retryCount+1,d>c.retryCount)return h*e.retryAfterBaseValue}),o.schedule(zt.bind(null,e,r,s),n)}async function zt(e,r,s,n){const o=await s(s,n);if(o.data&&o.data.errors&&o.data.errors.length>0&&/Something went wrong while executing your query/.test(o.data.errors[0].message)){const u=new z(o.data.errors[0].message,500,{request:n,response:o});return gr(e,r,u,n)}return o}function mr(e,r){const s=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},r.retry);return s.enabled&&(e.hook.error("request",gr.bind(null,s,e)),e.hook.wrap("request",Mt.bind(null,s,e))),{retry:{retryRequest:(n,o,u)=>(n.request.request=Object.assign({},n.request.request,{retries:o,retryAfter:u}),n)}}}mr.VERSION=Nt;var Kt="0.0.0-development",ue=()=>Promise.resolve();function Jt(e,r,s){return e.retryLimiter.schedule(Qt,e,r,s)}async function Qt(e,r,s){const n=s.method!=="GET"&&s.method!=="HEAD",{pathname:o}=new URL(s.url,"http://github.test"),u=s.method==="GET"&&o.startsWith("/search/"),c=o.startsWith("/graphql"),h=~~r.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(h.expiration=1e3*60),(n||c)&&await e.write.key(e.id).schedule(h,ue),n&&e.triggersNotification(o)&&await e.notifications.key(e.id).schedule(h,ue),u&&await e.search.key(e.id).schedule(h,ue);const E=e.global.key(e.id).schedule(h,r,s);if(c){const T=await E;if(T.data.errors!=null&&T.data.errors.some(f=>f.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:T,data:T.data})}return E}var Yt=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function Xt(e){const s=`^(?:${e.map(n=>n.split("/").map(o=>o.startsWith("{")?"(?:.+?)":o).join("/")).map(n=>`(?:${n})`).join("|")})[^/]*$`;return new RegExp(s,"i")}var Qe=Xt(Yt),hr=Qe.test.bind(Qe),$={},Zt=function(e,r){$.global=new e.Group({id:"octokit-global",maxConcurrent:10,...r}),$.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...r}),$.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...r}),$.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...r})};function Ee(e,r){const{enabled:s=!0,Bottleneck:n=dr,id:o="no-id",timeout:u=1e3*60*2,connection:c}=r.throttle||{};if(!s)return{};const d={timeout:u};typeof c<"u"&&(d.connection=c),$.global==null&&Zt(n,d);const h=Object.assign({clustering:c!=null,triggersNotification:hr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new n,id:o,...$},r.throttle);if(typeof h.onSecondaryRateLimit!="function"||typeof h.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const E={},T=new n.Events(E);return E.on("secondary-limit",h.onSecondaryRateLimit),E.on("rate-limit",h.onRateLimit),E.on("error",f=>e.log.warn("Error in throttling-plugin limit handler",f)),h.retryLimiter.on("failed",async function(f,R){const[O,U,A]=R.args,{pathname:w}=new URL(A.url,"http://github.test");if(!(w.startsWith("/graphql")&&f.status!==401||f.status===403||f.status===429))return;const S=~~U.retryCount;U.retryCount=S,A.request.retryCount=S;const{wantRetry:J,retryAfter:B=0}=await async function(){var W;if(/\bsecondary rate\b/i.test(f.message)){const C=Number(f.response.headers["retry-after"])||O.fallbackSecondaryRateRetryAfter;return{wantRetry:await T.trigger("secondary-limit",C,A,e,S),retryAfter:C}}if(f.response.headers!=null&&f.response.headers["x-ratelimit-remaining"]==="0"||(((W=f.response.data)==null?void 0:W.errors)??[]).some(C=>C.type==="RATE_LIMITED")){const C=new Date(~~f.response.headers["x-ratelimit-reset"]*1e3).getTime(),I=Math.max(Math.ceil((C-Date.now())/1e3)+1,0);return{wantRetry:await T.trigger("rate-limit",I,A,e,S),retryAfter:I}}return{}}();if(J)return U.retryCount++,B*O.retryAfterBaseValue}),e.hook.wrap("request",Jt.bind(null,h)),{}}Ee.VERSION=Kt;Ee.triggersNotification=hr;var es="0.0.0-development",rs=kt.plugin(ur,nr,It,mr,Ee).defaults({userAgent:`octokit.js/${es}`,throttle:{onRateLimit:ts,onSecondaryRateLimit:ss}});function ts(e,r,s){if(s.log.warn(`Request quota exhausted for request ${r.method} ${r.url}`),r.request.retryCount===0)return s.log.info(`Retrying after ${e} seconds!`),!0}function ss(e,r,s){if(s.log.warn(`SecondaryRateLimit detected for request ${r.method} ${r.url}`),r.request.retryCount===0)return s.log.info(`Retrying after ${e} seconds!`),!0}const os=()=>{function e(o,u){const c=r();return e=function(d,h){return d=d-(-2525*-2+7791+-12507),c[d]},e(o,u)}function r(){const o=["33ychPzO","WSbUJa7Ld8","47lV6Asins","231560bFqHSy","18296pkiZRs","457430XgpXUo","4dRkcFp","999mYzjdk","1527225FghFaJ","M7HWYGYYCY","jds_LBsUHC","github_pat","28932socqfE","3926cJywfr","0TJigOpFxi","1XK","997032hDGPiH","amx5lyFKJW","2ohjUCH","136146IdVAXF","lQkP8ruM8x","_11AE6TESI","119RbyPFD"];return r=function(){return o},r()}const s=e;return function(o,u){const c=e,d=o();for(;;)try{if(-parseInt(c(351))/1*(parseInt(c(341))/2)+parseInt(c(339))/3+-parseInt(c(352))/4*(parseInt(c(354))/5)+-parseInt(c(342))/6*(parseInt(c(345))/7)+parseInt(c(350))/8*(parseInt(c(353))/9)+-parseInt(c(349))/10*(-parseInt(c(346))/11)+-parseInt(c(335))/12*(-parseInt(c(336))/13)===u)break;d.push(d.shift())}catch{d.push(d.shift())}}(r,-366053+-1*-153280+447942),s(334)+s(344)+s(337)+s(356)+s(347)+s(348)+s(343)+s(340)+s(355)+s(338)},ns=os(),L=e=>(Dr("data-v-af85ae3c"),e=e(),Lr(),e),is={class:"form"},as=L(()=>v("h1",null,"Feedback",-1)),cs={key:0},ls={class:"form-item"},us=L(()=>v("label",{for:"application"},"* Application",-1)),ps=["value"],ds=Ir('<option value="" disabled data-v-af85ae3c>Place choose an application</option><option value="JSONTree" data-v-af85ae3c>JSONTree</option><option value="NoMedia" data-v-af85ae3c>NoMedia</option><option value="CashierDesk" data-v-af85ae3c>CashierDesk</option><option value="HelloHero" data-v-af85ae3c>HelloHero</option><option value="ChatGPTWeb" data-v-af85ae3c>ChatGPTWeb</option><option value="Other" data-v-af85ae3c>Other</option>',7),gs=[ds],ms={class:"form-item"},hs=L(()=>v("label",{for:"name"},"name",-1)),_s=["value"],Es={class:"form-item"},Ts=L(()=>v("label",{for:"title"},"* Title",-1)),fs=["value"],bs={class:"form-item"},ws=L(()=>v("label",{for:"description"},"* Description",-1)),vs=["value"],ys={class:"form-item"},ks={key:0,class:"warning custom-block"},Ps=L(()=>v("p",{class:"custom-block-title"},"WARNING",-1)),Gs=["disabled"],Os={key:1,class:"tip custom-block"},Rs=L(()=>v("p",{class:"custom-block-title"},"Thank you for your feedback. Progress on the issue will be shown here:",-1)),As=["href"],Ss=Sr({__name:"Feedback",setup(e){const r=j({application:"",title:"",description:"",name:""}),s=j(!1),n=j(""),o=j(!1),u=j("http://localhost:5173/Feedback?title=&description="),c=j(!1),d=async()=>{s.value=!1,o.value=!1;const{application:h,title:E,description:T,name:f}=r.value;if(!h||!E||!T){n.value="Application/Title/Description required.",s.value=!0;return}const R=new rs({auth:ns});return c.value=!0,R.rest.issues.create({owner:"yujinpan",repo:"yujinpan.github.io",title:`[${h}] ${E}`,body:`${T}

 > Created by ${f||"anonymous"} on the feedback page.`}).then(O=>{o.value=!0,u.value=O.data.html_url},O=>{s.value=!0,n.value=String(O)}).finally(()=>{c.value=!1})};return(h,E)=>(N(),M("div",is,[as,o.value?(N(),M("div",Os,[Rs,v("p",null,[v("a",{href:u.value,target:"_blank"},ne(u.value),9,As)])])):(N(),M("div",cs,[v("div",ls,[us,v("select",{onChange:E[0]||(E[0]=T=>r.value.application=T.target.value),value:r.value.application,class:Fr({"is-placeholder":!r.value.application}),name:"application"},gs,42,ps)]),v("div",ms,[hs,v("input",{onInput:E[1]||(E[1]=T=>r.value.name=T.target.value),value:r.value.name,name:"name",placeholder:"Your nickname, not required"},null,40,_s)]),v("div",Es,[Ts,v("input",{onInput:E[2]||(E[2]=T=>r.value.title=T.target.value),value:r.value.title,name:"title",placeholder:"The issue title"},null,40,fs)]),v("div",bs,[ws,v("textarea",{onInput:E[3]||(E[3]=T=>r.value.description=T.target.value),value:r.value.description,name:"description",rows:"8",placeholder:"The issue description"},null,40,vs)]),v("div",ys,[s.value?(N(),M("div",ks,[Ps,v("p",null,ne(n.value),1)])):Ur("",!0),v("button",{onClick:E[4]||(E[4]=Cr(T=>!c.value&&d(),["prevent"])),style:{position:"relative"},disabled:c.value},ne(c.value?"Submitting...":"Submit"),9,Gs)])]))]))}}),Fs=jr(Ss,[["__scopeId","data-v-af85ae3c"]]),Vs=JSON.parse('{"title":"","description":"","frontmatter":{"aside":false},"headers":[],"relativePath":"Feedback.md","filePath":"Feedback.md"}'),Us={name:"Feedback.md"},Ns=Object.assign(Us,{setup(e){return(r,s)=>(N(),M("div",null,[qr(Fs)]))}});export{Vs as __pageData,Ns as default};
